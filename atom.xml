<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>CrissWuBlog</title>
  
  <subtitle>成為一個厲害得普通人</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-04-08T12:48:15.391Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Criss Wu</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Vue基础语法二</title>
    <link href="http://yoursite.com/2019/04/08/Vue%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/"/>
    <id>http://yoursite.com/2019/04/08/Vue基础语法/</id>
    <published>2019-04-08T12:45:47.000Z</published>
    <updated>2019-04-08T12:48:15.391Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h2 id="插槽"><a href="#插槽" class="headerlink" title="插槽"></a>插槽</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><blockquote><p>简单来说,假如父组件需要在子组件内放一些DOM,那么这些DOM是显示,不显示,在那些地方显示,如何显示,就是插槽(slot)分发负责的活</p></blockquote><p><strong><em>注意:父组件在子组件内套的内容,是不显示的</em></strong></p><h3 id="slot"><a href="#slot" class="headerlink" title="slot"></a>slot</h3><blockquote><p>slot就是占位符,用于展示在组件标签内部显示的内容<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;app&quot;&gt;  </span><br><span class="line">    &lt;children&gt;  </span><br><span class="line">        &lt;span&gt;12345&lt;/span&gt;  </span><br><span class="line">        &lt;!--上面这行不会显示--&gt;  </span><br><span class="line">    &lt;/children&gt;  </span><br><span class="line">&lt;/div&gt;  </span><br><span class="line">&lt;script&gt;  </span><br><span class="line">    var vm = new Vue(&#123;  </span><br><span class="line">        el: &apos;#app&apos;,  </span><br><span class="line">        components: &#123;  </span><br><span class="line">            children: &#123;    //这个无返回值，不会继续派发  </span><br><span class="line">                template: &quot;&lt;button&gt;为了明确作用范围，所以使用button标签&lt;/button&gt;&quot;  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;);  </span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></p></blockquote><h3 id="单个slot"><a href="#单个slot" class="headerlink" title="单个slot"></a>单个slot</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;app&quot;&gt;  </span><br><span class="line">    &lt;children&gt;  </span><br><span class="line">        &lt;span&gt;12345&lt;/span&gt;  </span><br><span class="line">        &lt;!--上面这行不会显示--&gt;  </span><br><span class="line">    &lt;/children&gt;  </span><br><span class="line">&lt;/div&gt;  </span><br><span class="line">&lt;script&gt;  </span><br><span class="line">    var vm = new Vue(&#123;  </span><br><span class="line">        el: &apos;#app&apos;,  </span><br><span class="line">        components: &#123;  </span><br><span class="line">            children: &#123;    //这个无返回值，不会继续派发  </span><br><span class="line">                template: &quot;&lt;button&gt;&lt;slot&gt;&lt;/slot&gt;为了明确作用范围，所以使用button标签&lt;/button&gt;&quot;  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;);  </span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><ul><li>这样写结果是:<code>&lt;button&gt;&lt;span&gt;12345&lt;/span&gt;</code>为了明确作用范围，所以使用button标签<code>&lt;/button&gt;</code>即父组件入到子组件的内容,插入到了子组件的<code>&lt;slot&gt;&lt;/slot&gt;</code></li><li>注意即使有多个标签,也会被一起插入,相当于用父组件插入子组件里的标签,替换了<code>&lt;slot&gt;&lt;/slot&gt;</code><h3 id="具名插槽"><a href="#具名插槽" class="headerlink" title="具名插槽"></a>具名插槽</h3><blockquote><p>指将放入子组件里的不同html标签放在不同的位置(也就是不同的插槽内)</p></blockquote></li><li>父组件要在分发的标签里添加v-slot:name属性</li><li>子组件要在对应的分发位置的slot标签里添加name = name属性</li><li>然后就会将对应的标签放置在对应的位置上了</li><li>注意:slot不能当做组件的根元素使用,v-slot只用在组件中使用.</li><li>只要出现多个插槽，请始终为所有的插槽使用完整的基于<code>&lt;template&gt;</code>的语法</li></ul><h3 id="编译作用域"><a href="#编译作用域" class="headerlink" title="编译作用域"></a>编译作用域</h3><blockquote><p>组件标签 的内容中的 变量 获取的是当前组件调用者的 作用域的变量</p><ul><li>父级模板里所有的内容都是在父级作用域中编译的,子级模板里的所有内容都是在子作用域中编译的.</li></ul></blockquote><h3 id="后备内容"><a href="#后备内容" class="headerlink" title="后备内容"></a>后备内容</h3><blockquote><p>slot可以设置后备内容</p><ul><li>后备内容指的就是默认内容,它只会在没有提供内容的时候被渲染,它被放在slot标签内部.</li><li>如果在父组件中使用并且提供内容,那个这个提供的内容将会被渲染并取代后备内容</li></ul></blockquote><h3 id="作用域插槽"><a href="#作用域插槽" class="headerlink" title="作用域插槽"></a>作用域插槽</h3><blockquote><p>如何在组件内部的slot对应的组件外部内容中访问到组件内部的变量. 换句话说如何把组件内部的变量,通过slot在外部进行装饰.</p><ul><li>我们可以将user作为一个<slot>元素的特性绑定上去,<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;span&gt;</span><br><span class="line">  &lt;slot v-bind:user=&quot;user&quot;&gt;</span><br><span class="line">    &#123;&#123; user.lastName &#125;&#125;</span><br><span class="line">  &lt;/slot&gt;</span><br><span class="line">&lt;/span&gt;</span><br></pre></td></tr></table></figure></slot></li></ul></blockquote><ul><li>绑定在<slot>元素上的特性被称为插槽prop.现在在父级作用域中,我们也可以给v-slot带一个值来定义我们插槽prop的名字<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;current-user&gt;</span><br><span class="line">  &lt;template v-slot:default=&quot;abc&quot;&gt;</span><br><span class="line">    &#123;&#123; abc.user.firstName &#125;&#125;</span><br><span class="line">  &lt;/template&gt;</span><br><span class="line">&lt;/current-user&gt;</span><br></pre></td></tr></table></figure></slot></li></ul><h2 id="动态组件-异步组件"><a href="#动态组件-异步组件" class="headerlink" title="动态组件/异步组件"></a>动态组件/异步组件</h2><ul><li>keep-alive</li><li>‘my-component’: () =&gt; import(‘./my-async-component’)</li></ul><h2 id="边界情况"><a href="#边界情况" class="headerlink" title="边界情况"></a>边界情况</h2><ol><li>父组件调用子组件</li></ol><ul><li>组件时可以复用的,父组件找到子组件的唯一方法是给子组件取名字(使用ref)</li><li>然后调用方法时,在父组件方法中通过this.$refs.(子组件名)就可以找到子组件,并且使用它</li></ul><ol start="2"><li>孙子及以下节点找父组件</li></ol><ul><li>调用自身的方法打印this.$root就是顶级父组件对象</li></ul><ol start="3"><li>孩子组件找父组件</li></ol><ul><li>调用自身的方法打印this.$parent就是父组件对象</li></ul><h3 id="访问组件"><a href="#访问组件" class="headerlink" title="访问组件"></a>访问组件</h3><ul><li>访问根实例 $root</li><li>访问父级组件实例 $parent</li><li>访问子组件实例或子元素 $refs.xx</li></ul><h2 id="过渡-动画"><a href="#过渡-动画" class="headerlink" title="过渡/动画"></a>过渡/动画</h2><ul><li>v-enter  过渡的开始状态,在元素被插入之前生效</li><li>v-enter-active 定义进入过渡生效的状态,在整个过渡阶段应用,在元素被插入之前生效</li><li>v-enter-to  定义进入过渡的结束状态</li><li>v-leave   定义离开过渡的开始状态</li><li>v-leave-active 定义离开过渡生效的状态</li><li>v-leave-to 定义离开过渡的结束状态</li><li>注意: 需要使用vue提供的transiton标签把要进行过渡的元素包裹起来。</li></ul><h2 id="混入"><a href="#混入" class="headerlink" title="混入"></a>混入</h2><blockquote><p>可以复用的代码块,在组件引入可以把混合的对象合并到当前组件.</p><ul><li>通过使用mixins属性并且通过数组的形式引入要被混合的对象引入到当前组件</li></ul></blockquote><h2 id="自定义指令"><a href="#自定义指令" class="headerlink" title="自定义指令"></a>自定义指令</h2><blockquote><p>vue不提倡直接操作dom元素,如果真的需要有,一般在自定义指令里完成.指令可以传递参数和修饰符,使指令的操作更加灵活.</p><ul><li>通过directive属性定义,在inserted时被插入DOM对象</li><li>注意: 第一个参数永远是el,指的是当前指令的DOM对象</li><li>在标签中使用时需要加上v-</li><li>参数 binding.value 可以获取指令的参数</li><li>修饰符 binding.modifiers 通过修饰符可以传递额外的参数,多个参数是对象类型,其中每一个为boolean类型.</li></ul></blockquote><h2 id="自定义过滤器"><a href="#自定义过滤器" class="headerlink" title="自定义过滤器"></a>自定义过滤器</h2><ul><li>过滤器可以同时使用多个,通过管道符隔开</li><li>过滤器可以传参(可以传多个)</li><li>过滤器通过使用Vue.filter定义第一个参数为过滤器的名称,第二个参数为一个回调函数回调函数也有一个参数,为要过滤元素的属性值.</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;插槽&quot;&gt;&lt;a href=&quot;#插槽&quot; class=&quot;headerlink&quot; title=&quot;插槽&quot;&gt;&lt;/a&gt;插槽&lt;/h2&gt;&lt;h3 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;headerlink&quot; title=&quot;概念&quot;
      
    
    </summary>
    
      <category term="Vue基础" scheme="http://yoursite.com/categories/Vue%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="-Vue -基础" scheme="http://yoursite.com/tags/Vue-%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>原型对象总结</title>
    <link href="http://yoursite.com/2019/04/07/%E5%8E%9F%E5%9E%8B%E5%AF%B9%E8%B1%A1%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2019/04/07/原型对象总结/</id>
    <published>2019-04-07T14:03:20.000Z</published>
    <updated>2019-04-08T00:01:29.067Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h2 id="原型对象"><a href="#原型对象" class="headerlink" title="原型对象"></a>原型对象</h2><blockquote><p>函数的prototype属性</p><ul><li>每个函数都有一个prototype属性,它默认指向一个Object空对象(即称为:原型对象)</li><li>原型对象中有一个constructor,它指向函数对象</li></ul></blockquote><ul><li>给原型对象添加属性(一般都是方法)<ul><li>作用: 函数的实例对象自动拥有原型中的属性(方法)</li><li>实例对象可以引用原型对象添加的属性(一般是方法);<blockquote><p>显式原型和隐式原型</p></blockquote></li></ul></li><li>每个函数fucntion都有一个prototype,即显式原型</li><li>每个实例对象都有一个<strong>proto</strong>,称为隐式原型</li><li>实例对象的隐性原型对应的值,为其对应的构造函数的显式原型的值</li><li>总结:</li><li>函数的prototype属性:在定义函数时自动添加,默认值是一个空Object对象(也就是执行函数定义时自动添加了prototype属性)</li><li>注意prototype保存的值是地址值,它是一个引用变量属性.</li><li>函数的<strong>proto</strong>属性:在创建对象时自动添加,默认值为prototype的值</li><li><p>程序员能直接操作显式对象,但不能直接操作隐式对象(ES6之前)</p></li><li><p>执行函数定义与执行函数的区别</p><ul><li>执行函数定义的时候,函数体还没有执行,只是定义了函数,本质上只是创建了一个函数对象 </li><li>加()的时候函数体才会执行 调用 </li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;原型对象&quot;&gt;&lt;a href=&quot;#原型对象&quot; class=&quot;headerlink&quot; title=&quot;原型对象&quot;&gt;&lt;/a&gt;原型对象&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;函数的prototype属性&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;每个函
      
    
    </summary>
    
      <category term="面向对象" scheme="http://yoursite.com/categories/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    
    
      <category term="-Javascript -面向对象" scheme="http://yoursite.com/tags/Javascript-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    
  </entry>
  
</feed>
