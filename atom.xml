<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>CrissWuBlog</title>
  
  <subtitle>成為一個厲害得普通人</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-04-10T15:31:47.336Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Criss Wu</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Vue路由</title>
    <link href="http://yoursite.com/2019/04/10/Vue%E8%B7%AF%E7%94%B1/"/>
    <id>http://yoursite.com/2019/04/10/Vue路由/</id>
    <published>2019-04-10T14:16:51.000Z</published>
    <updated>2019-04-10T15:31:47.336Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h2 id="Vue路由"><a href="#Vue路由" class="headerlink" title="Vue路由"></a>Vue路由</h2><h3 id="路由的概念"><a href="#路由的概念" class="headerlink" title="路由的概念"></a>路由的概念</h3><ul><li><strong>后端路由</strong>: 对于普通网页来说,所有的超链接都是URL地址,所有URL地址都对应服务器上对应的资源</li><li><strong>前端路由</strong>: 对于单页面用户来说,主要通过URL里面的hash(#号)来实现不同页面之间的切换,同时hash有一个特点:HTTP请求中不会包含相关的内容,所有单页面跳转主要用hash实现.在单页面程序中,这种通过hash来实现切换页面的方式,我们称之为前端路由.(区别于后端路由)</li></ul><h3 id="URL里面的hash有什么特点"><a href="#URL里面的hash有什么特点" class="headerlink" title="URL里面的hash有什么特点?"></a>URL里面的hash有什么特点?</h3><ul><li>思考这个问题…</li></ul><h3 id="router-routes-route之间的区别与联系"><a href="#router-routes-route之间的区别与联系" class="headerlink" title="router,routes,route之间的区别与联系"></a>router,routes,route之间的区别与联系</h3><ol><li>route,它是一条路由,由这个英文单词也可以看出来，它是单数， Home按钮  =&gt; home内容， 这是一条route,  about按钮 =&gt; about 内容， 这是另一条路由。</li><li>routes 是一组路由，把上面的每一条路由组合起来，形成一个数组。[{home 按钮 =&gt;home内容 }， { about按钮 =&gt; about 内容}]</li><li>router 是一个机制，相当于一个管理者，它来管理路由。因为routes 只是定义了一组路由，它放在哪里是静止的，当真正来了请求，怎么办？ 就是当用户点击home 按钮的时候，怎么办？这时router 就起作用了，它到routes 中去查找，去找到对应的 home 内容，所以页面中就显示了 home 内容。</li></ol><h3 id="使用路由的基本步骤"><a href="#使用路由的基本步骤" class="headerlink" title="使用路由的基本步骤"></a>使用路由的基本步骤</h3><ol><li>安装路由模块,导入后自动拥有hash路由,可以在网站上显示看到#</li><li>创建一个组件模板对象</li><li>创建一个路由实例对象,当导入vue-router包之后,在window全局对象中,就有了一个路由构造器<ul><li>其中在new路由对象的时候,可以为构造函数,传递一个配置对象</li><li>这个配置对象实际就是路由匹配规则的意思</li><li>每个路由规则都是一个对象,这个规则对象中有两个必须的属性</li><li>path表示监听,拦截路由的地址</li><li>component表示,根据path拦截到对应的路由匹配地址,则展示对应当前路由地址的component组件</li><li>注意:component属性值必须是一个组件模板对象,而不能是组件的引入名称</li></ul></li><li>通过router属性,将路由规则对象注册到vm实例上,用来监听URL地址的变化,展示对应的组件.</li><li>组件需要在页面中展示,就需要Vue提供的router-view相当于一个标签属性,我们可以把它当做一个占位符.将来根据路由规则匹配到的组件,就会展示在这个router-view</li><li>router-link 默认渲染a标签 (tag可以改变展示的标签) <h3 id="vue使用params-query传参的区别"><a href="#vue使用params-query传参的区别" class="headerlink" title="vue使用params,query传参的区别"></a>vue使用params,query传参的区别</h3><strong>params</strong>：/router1/:id ，/router1/123，/router1/789 ,这里的id叫做params</li></ol><p><strong>query</strong>：/router1?id=123 ,/router1?id=456 ,这里的id叫做query。</p><ul><li>区别一: 路由设置这里,<strong>当你使用params方法传参时,要在路由后面加参数名</strong>,并且传参的时候,参数名要跟路由后面的设置的参数名对应,使用query方法，就没有这种限制，直接在跳转里面用就可以.</li><li>注意:如果路由上不写参数,也是可以传过去的,但是不会在URL上显示出你的参数,并且当你跳转到其他页面或者刷新页面的时候参数会丢失.那依赖的这个参数的http请求,或者其他的操作就会失败.</li><li>区别二:<strong>params一旦设置在路由上</strong>,params就是路由的一部分,如果这个路由有params传参,但是在跳转的时候,没有传这个参数,会导致跳转失败或者页面会没有内容.</li></ul><h3 id="push传参的三种方法及与replace的区别"><a href="#push传参的三种方法及与replace的区别" class="headerlink" title="push传参的三种方法及与replace的区别"></a>push传参的三种方法及与replace的区别</h3><ul><li>$router.push可以实现路由的跳转</li></ul><ol><li>第一种形式:字符串<code>this.$router.push(&#39;/about&#39;)</code></li><li>第二种形式:对象<code>this.$router.push({path:&#39;/about&#39;})</code></li><li>第三种形式:命名的路由,也是传入一个对象,如果一个路由有name属性params跳转到某个详情页<code>this.$router.push({name:&#39;about&#39;})</code>在跳转到某个详情页的时候,还需要给parmas属性传入一个对象,对象里面包含详情页的内容.</li><li>replace会将之前访问的路由替换成要跳转的路由.并且不能返回上一次跳转的路由.但是push可以实现返回</li></ol><h3 id="路由注意事项"><a href="#路由注意事项" class="headerlink" title="路由注意事项"></a>路由注意事项</h3><p><strong>注意:exact-active与active的区别</strong><br>    exact是当前真正匹配的那个路由 active是匹配到exact路由经过的那个路由<br>    比如说 要匹配北京新闻详情里的路由,必须要经过北京bj 这个路由</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;Vue路由&quot;&gt;&lt;a href=&quot;#Vue路由&quot; class=&quot;headerlink&quot; title=&quot;Vue路由&quot;&gt;&lt;/a&gt;Vue路由&lt;/h2&gt;&lt;h3 id=&quot;路由的概念&quot;&gt;&lt;a href=&quot;#路由的概念&quot; class=&quot;head
      
    
    </summary>
    
      <category term="Vue" scheme="http://yoursite.com/categories/Vue/"/>
    
    
      <category term="Vue" scheme="http://yoursite.com/tags/Vue/"/>
    
      <category term="路由" scheme="http://yoursite.com/tags/%E8%B7%AF%E7%94%B1/"/>
    
  </entry>
  
  <entry>
    <title>Vue基础语法二</title>
    <link href="http://yoursite.com/2019/04/10/Vue%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95%E4%BA%8C/"/>
    <id>http://yoursite.com/2019/04/10/Vue基础语法二/</id>
    <published>2019-04-10T14:14:31.000Z</published>
    <updated>2019-04-10T14:15:54.688Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h2 id="Vue基础之Vue模板语法"><a href="#Vue基础之Vue模板语法" class="headerlink" title="Vue基础之Vue模板语法"></a>Vue基础之Vue模板语法</h2><h3 id="插值"><a href="#插值" class="headerlink" title="插值"></a>插值</h3><ul><li>数据绑定最常见的的形式就是使用Mustache语法(双大括号)的文本插值,双大括号会将数据解析成纯文本<br><code>&lt;span&gt;Message:&lt;/span&gt;</code></li><li>如果Mustache标签将会被替代为对应数据对象上的msg属性的值.无论何时,绑定的数据对象上的msg属性发生了变化,</li><li>插值处的内容都会更新</li></ul><h3 id="纯HTML"><a href="#纯HTML" class="headerlink" title="纯HTML"></a>纯HTML</h3><ul><li>双大括号会将数据解释为纯文本,而非 HTML.为了输出真正的HTML,你需要使用v-html指令<br><code>&lt;div v-html=&quot;rawHtml&quot;&gt;&lt;/div&gt;</code></li><li>此时被插入的内容都会被当做HTML–数据绑定会被忽略<h3 id="过滤器"><a href="#过滤器" class="headerlink" title="过滤器"></a>过滤器</h3></li><li>Vue允许你自定义过滤器,来实现一些常见的文本格式化功能.过滤器应该被添加上mustache插值尾部,由”管道符”标识起来<br><code></code></li><li>过滤器可以串联</li><li>过滤器是javascript函数,因此可以接受参数<h3 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h3></li><li>指令是带有(Directives)是带有v-前缀的特殊属性,指令属性的值预期是单一javascript表达式(除了v-for,之后再讨论).指令的职责就是当其表达式的值时,相应的将某些行为应用到DOM上<h3 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h3></li><li>一些指令只能接受一个参数,在指令后以冒号指明,例如v-bind指令被用来更新HTML属性<br><code>&lt;a v-bind:href=&quot;url&quot;&gt;&lt;/a&gt;</code></li><li>在这里href是参数,告知v-bind指令将该元素的href属性与表达式url值绑定<h3 id="修饰符"><a href="#修饰符" class="headerlink" title="修饰符"></a>修饰符</h3></li><li>修饰符(Modifiers)是以半角句号.指明的特殊后缀,用于指出一个指令应该以特殊方法绑定</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;Vue基础之Vue模板语法&quot;&gt;&lt;a href=&quot;#Vue基础之Vue模板语法&quot; class=&quot;headerlink&quot; title=&quot;Vue基础之Vue模板语法&quot;&gt;&lt;/a&gt;Vue基础之Vue模板语法&lt;/h2&gt;&lt;h3 id=&quot;插值&quot;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Vue计算属性</title>
    <link href="http://yoursite.com/2019/04/10/Vue%E8%AE%A1%E7%AE%97%E5%B1%9E%E6%80%A7/"/>
    <id>http://yoursite.com/2019/04/10/Vue计算属性/</id>
    <published>2019-04-10T03:47:37.000Z</published>
    <updated>2019-04-10T14:01:38.088Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h2 id="计算属性"><a href="#计算属性" class="headerlink" title="计算属性"></a>计算属性</h2><h3 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h3><!-- **1.计算属性的特点**+ 1.可以对属性数据进行逻辑操作+ 2.对计算属性中的数据进行监视,也就是被计算的属性如果被修改,那计算属性后的结果就是被修改后再计算的结果.+ 3.计算属性依赖于响应式中的数据,可以当做作为data数据中的修饰符,<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">var vm = new Vue(&#123;</span><br><span class="line">    el: &quot;#app&quot;,</span><br><span class="line">    data:&#123;</span><br><span class="line">        msg:&quot;hello vue!&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    computed:&#123;</span><br><span class="line">        msgReverse:function()&#123;</span><br><span class="line">            return this.msg.split(&quot; &quot;).reverse().join(&quot; &quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line">调用方法：&#123;&#123;msgReverse&#125;&#125;  //vue hello</span><br></pre></td></tr></table></figure><h3 id="2-computed计算属性VSmethods内的方法"><a href="#2-computed计算属性VSmethods内的方法" class="headerlink" title="2.computed计算属性VSmethods内的方法"></a>2.computed计算属性VSmethods内的方法</h3><ul><li>计算属性的get函数，如果使用methods内的方法，也可以达到同样的效果，那我们为何要使用计算属性呢？</li><li>他们之间的的区别<ol><li>计算属性是依赖于被计算的数据,只有当这个数据改变的时候,计算属性才会改变</li><li>计算属性是有缓存的,如果计算的那个数据没有发生改变,无论你访问多少次,计算属性返回的值依旧是之前计算的值</li></ol></li></ul><p><code>`</code><br>       var vm = new Vue({<br>           el: “#app”,<br>           data:{<br>               num:8<br>           },<br>           computed:{<br>               getNum:function(){<br>                   console.log(new Date());    // Wed Feb 27 2019 13:00:42 GMT+0800 (中国标准时间)<br>                   return this.num+1;         // 9<br>               }<br>           },<br>           methods:{<br>               getNum2:function(){<br>                   console.log(new Date());    // Wed Feb 27 2019 13:00:42 GMT+0800 (中国标准时间)<br>                   return this.num+1;         // 9<br>               }<br>           }<br>       })</p><pre><code>   // 模拟多次访问计算属性，每次结果都一样，new Date()的值也被缓存了，没有发生改变   setInterval(function(){       console.log(vm.getNum);     // Wed Feb 27 2019 13:00:42 GMT+0800 (中国标准时间)                                   // 9   },1000)   // 模拟多次访问methods内的方法，new Date()每次结果都在发生改变，没有被缓存   setInterval(function(){       console.log(vm.getNum2());     // （ new Date的值一直在变化 ）                                   // 9   },1000)``` --&gt;</code></pre>-->]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;计算属性&quot;&gt;&lt;a href=&quot;#计算属性&quot; class=&quot;headerlink&quot; title=&quot;计算属性&quot;&gt;&lt;/a&gt;计算属性&lt;/h2&gt;&lt;h3 id=&quot;基本用法&quot;&gt;&lt;a href=&quot;#基本用法&quot; class=&quot;headerlink
      
    
    </summary>
    
      <category term="Vue基础语法" scheme="http://yoursite.com/categories/Vue%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/"/>
    
    
  </entry>
  
  <entry>
    <title>es6常用数组操作及总结</title>
    <link href="http://yoursite.com/2019/04/10/es6%E5%B8%B8%E7%94%A8%E6%95%B0%E7%BB%84%E6%93%8D%E4%BD%9C%E5%8F%8A%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2019/04/10/es6常用数组操作及总结/</id>
    <published>2019-04-10T01:01:48.000Z</published>
    <updated>2019-04-10T14:02:46.841Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h2 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h2><ol><li><code>array.filter(callback[, thisArg]);</code></li></ol><ul><li>filter是一个常用的数组操作,它用于将Array的不符合条件的元素过滤出来,返回由符合条件元素组成的新列表</li><li>和map()类似,filter也接收一个函数,和map()不同的是,filter()把传入的函数一次作用于每个元素,然后根据返回值是true还是flase决定保留还是丢弃该元素.</li><li>filter()接收的是一个回调函数,通常我们只使用它的第一个参数,表示Array的某个元素,表示元素的位置和元素本身.</li></ul><p><strong>filter的几种用法</strong></p><ul><li><p>创建一个数组，判断数组中是否存在某个值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var newarr = [</span><br><span class="line">  &#123; num: 1, val: &apos;ceshi&apos;, flag: &apos;aa&apos; &#125;,</span><br><span class="line">  &#123; num: 2, val: &apos;ceshi2&apos;, flag: &apos;aa2&apos;  &#125;</span><br><span class="line">]</span><br><span class="line">console.log(newarr.filter(item =&gt; item.num===2 ))</span><br></pre></td></tr></table></figure></li><li><p>去掉空数组空字符串、undefined、null</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">var arr = [&apos;1&apos;,&apos;2&apos;,undefined, &apos;3.jpg&apos;,undefined]</span><br><span class="line">var newArr = arr.filter(item =&gt; item)</span><br><span class="line">console.log(newArr)</span><br><span class="line"></span><br><span class="line">var arr = [&apos;1&apos;,&apos;2&apos;,null, &apos;3.jpg&apos;,null]</span><br><span class="line">var newArr = arr.filter(item =&gt; item)</span><br><span class="line">console.log(newArr)</span><br><span class="line"></span><br><span class="line">&gt;//空字符串里面不能包含空格</span><br><span class="line">var arr = [&apos;1&apos;,&apos;2&apos;,&apos;&apos;, &apos;3.jpg&apos;,&apos;&apos;]</span><br><span class="line">var newArr = arr.filter(item =&gt; item)</span><br><span class="line">console.log(newArr)</span><br></pre></td></tr></table></figure></li><li><p>去掉数组中不符合项</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var arr = [20,30,50, 96,50]</span><br><span class="line">var newArr = arr.filter(item =&gt; item&gt;40)  </span><br><span class="line">console.log(newArr)</span><br></pre></td></tr></table></figure></li><li><p>过滤不符合项</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var arr = [&apos;10&apos;,&apos;12&apos;,&apos;23&apos;,&apos;44&apos;,&apos;42&apos;]</span><br><span class="line">var newArr = arr.filter(item =&gt; item.indexOf(&apos;2&apos;)&lt;0) </span><br><span class="line">console.log(newArr)</span><br></pre></td></tr></table></figure></li><li><p>数组去重</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var arr = [1, 2, 2, 3, 4, 5, 5, 6, 7, 7,8,8,0,8,6,3,4,56,2];</span><br><span class="line">var arr2 = arr.filter((x, index,self)=&gt;self.indexOf(x)===index) //indexof可以返回每个指定字符串在字符串中出现的位置</span><br><span class="line">console.log(arr2); //[1, 2, 3, 4, 5, 6, 7, 8, 0, 56]</span><br></pre></td></tr></table></figure></li></ul><ol start="2"><li>array.map(callback[, thisArg]);</li></ol><ul><li>返回一个新数组,新数组中每个元素都是调用callback函数后返回的结果,</li><li>在实际使用的时候,我们可以利用map方法以便利的获取对象中的特定的属性值</li><li>注意:array.map由于不具有过滤的功能，因此array调用map函数时，如果array中的数据并不是每一个都会return，则必须先filter，然后再map，即map调用时必须是对数组中的每一个元素都有效。<figure class="highlight plain"><figcaption><span>maped </span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">``` maped: [&apos;aac&apos;, &apos;bbc&apos;];**</span><br></pre></td></tr></table></figure></li></ul><ol start="3"><li>array.includes(searchElement, fromIndex);</li></ol><ul><li>inlcludes()方法用来判断一个数组是否包含一个指定的值,返回true或者false.searchElement要查找的元素,fromIndex开始查找的索引的位置<br><code>[1, 2, 3].includes(2, 2);  // false</code></li></ul><ol start="4"><li>array.findIndex(callback[, thisArg]);</li></ol><ul><li>返回通过callback函数测试的第一个元素的索引，否则返回-1，callback函数定义同上。<br><code>const findIndex = [1, 2, 3].findIndex(element =&gt; element &gt; 1);  // findIndex: 1</code></li></ul><ol start="5"><li>array.find(callback[, thisArg]);</li></ol><ul><li>返回通过callback函数测试的第一个元素，否则返回undefined，callback函数定义同上。<br><code>const finded = [1, 2, 3].find(element =&gt; element &gt; 1); // finded: 2</code></li></ul><ol start="6"><li>array.slice(begin, end)</li></ol><ul><li>返回一个新数组，包含原数组从begin 到 end(不包含end)索引位置的所有元素。<br><code>const newArray = [&#39;zero&#39;, &#39;one&#39;, &#39;two&#39;, &#39;three&#39;].slice(1, 3);   // newArray: [&#39;one&#39;, &#39;two&#39;];</code></li></ul><ol start="7"><li>array.splice(start[, deleteCount, item1, item2, …]);</li></ol><ul><li>通过删除现有元素和/或添加新元素来更改一个数组的内容.start指定修改的开始位置.deleteCount:从start位置开始要删除的元素个数;要添加进数组的元素,从start位置开始.</li><li>注意:返回值是由被删除数组组成的数组,如果只删除了一个元素,则返回只包含一个元素的数组.如果没有删除元素,则返回空数组.</li><li>如果deleteCount大于start之后的元素的总数.则从start后面的元素都将被删除(含start).<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">const myFish = [&apos;angel&apos;, &apos;clown&apos;, &apos;mandarin&apos;, &apos;sturgeon&apos;];</span><br><span class="line">const deleted = myFish.splice(2, 0, &apos;drum&apos;); // 在索引为2的位置插入&apos;drum&apos;</span><br><span class="line">// myFish 变为 [&quot;angel&quot;, &quot;clown&quot;, &quot;drum&quot;, &quot;mandarin&quot;, &quot;sturgeon&quot;]，deleted为[]</span><br></pre></td></tr></table></figure></li></ul><ol start="8"><li>array.concat(array1, array2,…arrayN);</li></ol><ul><li>合并多个数组,返回合并后的数组,原数组没有变化<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">const array = [1,2].concat([&apos;a&apos;, &apos;b&apos;], [&apos;name&apos;]);</span><br><span class="line">// [1, 2, &quot;a&quot;, &quot;b&quot;, &quot;name&quot;]</span><br></pre></td></tr></table></figure></li></ul><ol start="9"><li>array.pop() 与 array.shift();</li></ol><ul><li><p>pop为从数组中删除最后一个元素，并返回最后一个元素的值，原数组的最后一个元素被删除。数组为空时返回undefined。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[1, 2, 3].pop();</span><br><span class="line">// 3</span><br></pre></td></tr></table></figure></li><li><p>shift删除数组的第一个元素，并返回第一个元素，原数组的第一个元素被删除。数组为空返回undefined。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">const shifted = [&apos;one&apos;, &apos;two&apos;, &apos;three&apos;].shift();</span><br><span class="line">// shifted: &apos;one&apos;</span><br></pre></td></tr></table></figure></li></ul><ol start="10"><li>array.push(element1, element2, ….elementN) 与 array.unshift(element1, element2, …elementN);</li></ol><ul><li>push是将一个或多个元素添加到数组的末尾，并返回新数组的长度; unshift将一个或多个元素添加到数组的开头，并返回新数组的长度。唯一的区别就是插入的位置不同。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">const arr = [1, 2, 3];</span><br><span class="line">const length = arr.push(4, 5);</span><br><span class="line">// arr: [1, 2, 3, 4, 5]; length: 5</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;常用方法&quot;&gt;&lt;a href=&quot;#常用方法&quot; class=&quot;headerlink&quot; title=&quot;常用方法&quot;&gt;&lt;/a&gt;常用方法&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;code&gt;array.filter(callback[, thisArg]
      
    
    </summary>
    
      <category term="es6" scheme="http://yoursite.com/categories/es6/"/>
    
    
      <category term="es6" scheme="http://yoursite.com/tags/es6/"/>
    
      <category term="数组" scheme="http://yoursite.com/tags/%E6%95%B0%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>Vue基础语法二</title>
    <link href="http://yoursite.com/2019/04/08/Vue%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/"/>
    <id>http://yoursite.com/2019/04/08/Vue基础语法/</id>
    <published>2019-04-08T12:45:47.000Z</published>
    <updated>2019-04-10T05:34:49.500Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h2 id="插槽"><a href="#插槽" class="headerlink" title="插槽"></a>插槽</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><blockquote><p>简单来说,假如父组件需要在子组件内放一些DOM,那么这些DOM是显示,不显示,在那些地方显示,如何显示,就是插槽(slot)分发负责的活</p></blockquote><p><strong><em>注意:父组件在子组件内套的内容,是不显示的</em></strong></p><h3 id="slot"><a href="#slot" class="headerlink" title="slot"></a>slot</h3><blockquote><p>slot就是占位符,用于展示在组件标签内部显示的内容<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;app&quot;&gt;  </span><br><span class="line">    &lt;children&gt;  </span><br><span class="line">        &lt;span&gt;12345&lt;/span&gt;  </span><br><span class="line">        &lt;!--上面这行不会显示--&gt;  </span><br><span class="line">    &lt;/children&gt;  </span><br><span class="line">&lt;/div&gt;  </span><br><span class="line">&lt;script&gt;  </span><br><span class="line">    var vm = new Vue(&#123;  </span><br><span class="line">        el: &apos;#app&apos;,  </span><br><span class="line">        components: &#123;  </span><br><span class="line">            children: &#123;    //这个无返回值，不会继续派发  </span><br><span class="line">                template: &quot;&lt;button&gt;为了明确作用范围，所以使用button标签&lt;/button&gt;&quot;  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;);  </span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></p></blockquote><h3 id="单个slot"><a href="#单个slot" class="headerlink" title="单个slot"></a>单个slot</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;app&quot;&gt;  </span><br><span class="line">    &lt;children&gt;  </span><br><span class="line">        &lt;span&gt;12345&lt;/span&gt;  </span><br><span class="line">        &lt;!--上面这行不会显示--&gt;  </span><br><span class="line">    &lt;/children&gt;  </span><br><span class="line">&lt;/div&gt;  </span><br><span class="line">&lt;script&gt;  </span><br><span class="line">    var vm = new Vue(&#123;  </span><br><span class="line">        el: &apos;#app&apos;,  </span><br><span class="line">        components: &#123;  </span><br><span class="line">            children: &#123;    //这个无返回值，不会继续派发  </span><br><span class="line">                template: &quot;&lt;button&gt;&lt;slot&gt;&lt;/slot&gt;为了明确作用范围，所以使用button标签&lt;/button&gt;&quot;  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;);  </span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><ul><li>这样写结果是:<code>&lt;button&gt;&lt;span&gt;12345&lt;/span&gt;</code>为了明确作用范围，所以使用button标签<code>&lt;/button&gt;</code>即父组件入到子组件的内容,插入到了子组件的<code>&lt;slot&gt;&lt;/slot&gt;</code></li><li>注意即使有多个标签,也会被一起插入,相当于用父组件插入子组件里的标签,替换了<code>&lt;slot&gt;&lt;/slot&gt;</code><h3 id="具名插槽"><a href="#具名插槽" class="headerlink" title="具名插槽"></a>具名插槽</h3><blockquote><p>指将放入子组件里的不同html标签放在不同的位置(也就是不同的插槽内)</p></blockquote></li><li>父组件要在分发的标签里添加v-slot:name属性</li><li>子组件要在对应的分发位置的slot标签里添加name = name属性</li><li>然后就会将对应的标签放置在对应的位置上了</li><li>注意:slot不能当做组件的根元素使用,v-slot只用在组件中使用.</li><li>只要出现多个插槽，请始终为所有的插槽使用完整的基于<code>&lt;template&gt;</code>的语法</li></ul><h3 id="编译作用域"><a href="#编译作用域" class="headerlink" title="编译作用域"></a>编译作用域</h3><blockquote><p>组件标签 的内容中的 变量 获取的是当前组件调用者的 作用域的变量</p><ul><li>父级模板里所有的内容都是在父级作用域中编译的,子级模板里的所有内容都是在子作用域中编译的.</li></ul></blockquote><h3 id="后备内容"><a href="#后备内容" class="headerlink" title="后备内容"></a>后备内容</h3><blockquote><p>slot可以设置后备内容</p><ul><li>后备内容指的就是默认内容,它只会在没有提供内容的时候被渲染,它被放在slot标签内部.</li><li>如果在父组件中使用并且提供内容,那个这个提供的内容将会被渲染并取代后备内容</li></ul></blockquote><h3 id="作用域插槽"><a href="#作用域插槽" class="headerlink" title="作用域插槽"></a>作用域插槽</h3><blockquote><p>如何在组件内部的slot对应的组件外部内容中访问到组件内部的变量. 换句话说如何把组件内部的变量,通过slot在外部进行装饰.</p><ul><li>我们可以将user作为一个<slot>元素的特性绑定上去,<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;span&gt;</span><br><span class="line">  &lt;slot v-bind:user=&quot;user&quot;&gt;</span><br><span class="line">    &#123;&#123; user.lastName &#125;&#125;</span><br><span class="line">  &lt;/slot&gt;</span><br><span class="line">&lt;/span&gt;</span><br></pre></td></tr></table></figure></slot></li></ul></blockquote><ul><li>绑定在<slot>元素上的特性被称为插槽prop.现在在父级作用域中,我们也可以给v-slot带一个值来定义我们插槽prop的名字<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;current-user&gt;</span><br><span class="line">  &lt;template v-slot:default=&quot;abc&quot;&gt;</span><br><span class="line">    &#123;&#123; abc.user.firstName &#125;&#125;</span><br><span class="line">  &lt;/template&gt;</span><br><span class="line">&lt;/current-user&gt;</span><br></pre></td></tr></table></figure></slot></li></ul><h2 id="动态组件-异步组件"><a href="#动态组件-异步组件" class="headerlink" title="动态组件/异步组件"></a>动态组件/异步组件</h2><ul><li>keep-alive</li><li>‘my-component’: () =&gt; import(‘./my-async-component’)</li></ul><h2 id="边界情况"><a href="#边界情况" class="headerlink" title="边界情况"></a>边界情况</h2><ol><li>父组件调用子组件</li></ol><ul><li>组件时可以复用的,父组件找到子组件的唯一方法是给子组件取名字(使用ref)</li><li>然后调用方法时,在父组件方法中通过this.$refs.(子组件名)就可以找到子组件,并且使用它</li></ul><ol start="2"><li>孙子及以下节点找父组件</li></ol><ul><li>调用自身的方法打印this.$root就是顶级父组件对象</li></ul><ol start="3"><li>孩子组件找父组件</li></ol><ul><li>调用自身的方法打印this.$parent就是父组件对象</li></ul><h3 id="访问组件"><a href="#访问组件" class="headerlink" title="访问组件"></a>访问组件</h3><ul><li>访问根实例 $root</li><li>访问父级组件实例 $parent</li><li>访问子组件实例或子元素 $refs.xx</li></ul><h2 id="过渡-动画"><a href="#过渡-动画" class="headerlink" title="过渡/动画"></a>过渡/动画</h2><ul><li>v-enter  过渡的开始状态,在元素被插入之前生效</li><li>v-enter-active 定义进入过渡生效的状态,在整个过渡阶段应用,在元素被插入之前生效</li><li>v-enter-to  定义进入过渡的结束状态</li><li>v-leave   定义离开过渡的开始状态</li><li>v-leave-active 定义离开过渡生效的状态</li><li>v-leave-to 定义离开过渡的结束状态</li><li>注意: 需要使用vue提供的transiton标签把要进行过渡的元素包裹起来。</li></ul><h2 id="混入"><a href="#混入" class="headerlink" title="混入"></a>混入</h2><blockquote><p>可以复用的代码块,在组件引入可以把混合的对象合并到当前组件.</p><ul><li>通过使用mixins属性并且通过数组的形式引入要被混合的对象引入到当前组件</li></ul></blockquote><h2 id="自定义指令"><a href="#自定义指令" class="headerlink" title="自定义指令"></a>自定义指令</h2><blockquote><p>vue不提倡直接操作dom元素,如果真的需要有,一般在自定义指令里完成.指令可以传递参数和修饰符,使指令的操作更加灵活.</p><ul><li>通过directive属性定义,在inserted时被插入DOM对象</li><li>注意: 第一个参数永远是el,指的是当前指令的DOM对象</li><li>在标签中使用时需要加上v-</li><li>参数 binding.value 可以获取指令的参数</li><li>修饰符 binding.modifiers 通过修饰符可以传递额外的参数,多个参数是对象类型,其中每一个为boolean类型.</li></ul></blockquote><h2 id="自定义过滤器"><a href="#自定义过滤器" class="headerlink" title="自定义过滤器"></a>自定义过滤器</h2><ul><li>过滤器可以同时使用多个,通过管道符隔开</li><li>过滤器可以传参(可以传多个)</li><li>过滤器通过使用Vue.filter定义第一个参数为过滤器的名称,第二个参数为一个回调函数回调函数也有一个参数,为要过滤元素的属性值.</li></ul><h2 id="列表渲染-v-for"><a href="#列表渲染-v-for" class="headerlink" title="列表渲染(v-for)"></a>列表渲染(v-for)</h2><blockquote><p>我们使用v-for指令根据一组数据的选项列表进行渲染.v-for指令需要以item in items形式的特殊语法,items是源数据组并且item是数组元素迭代的别名<br><strong>基本用法</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;ul id =&quot;example-1&quot;&gt;</span><br><span class="line">    &lt;li v-for=&quot;item in items&quot;&gt;</span><br><span class="line">        &#123;&#123;item.message&#125;&#125;</span><br><span class="line">    &lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br></pre></td></tr></table></figure></p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">var example1 new = vue(&#123;</span><br><span class="line">    el:&quot;#example&quot;,</span><br><span class="line">    data:&#123;</span><br><span class="line">        items:&#123;</span><br><span class="line">            &#123;message:&apos;foo&apos;&#125;,</span><br><span class="line">            &#123;message:&apos;bar&apos;&#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li>在v-for块中,我们拥有对父作用域属性的完全访问权限,v-for还支持一个可选的第二个参数为当前的索引</li><li>注意:你也可以使用of代替in作为分隔符,因为它是最近Javascript迭代器的语法</li></ul><p><strong>对象迭代</strong></p><ul><li>可以提供三个参数:</li><li>value为键值,第二个参数key为键名,第三个参数为索引index</li></ul><p><strong>整数迭代</strong></p><ul><li>v-for也可以取整数.在这种情况下,它将重复多次模板</li></ul><p><strong>组件和v-for</strong></p><ul><li>在自定义组件里你也可以使用v-for</li><li>然而他不能自动传递数据到组件里,因为组件里有自己的作用域,为了传递迭代数据到组件里,我们要使用pros</li></ul><p><strong>key</strong></p><ul><li>为了给Vue一个提示,以便它能跟踪每个节点的身份,从而重用和重新排序现有元素,你需要为每一项提供一个唯一的key值,它的工作方式类似于一个属性,所以你需要使用v-bind来绑定动态值</li></ul><h2 id="数组更新检测"><a href="#数组更新检测" class="headerlink" title="数组更新检测"></a>数组更新检测</h2><h3 id="变异方法-会改变原数组-且会触发更新"><a href="#变异方法-会改变原数组-且会触发更新" class="headerlink" title="变异方法:会改变原数组,且会触发更新"></a>变异方法:会改变原数组,且会触发更新</h3><ul><li>push,pro,shift,unshift,splice,sort,reverse<h3 id="非变异方法-不会改变原数组-总是返回一个新数组"><a href="#非变异方法-不会改变原数组-总是返回一个新数组" class="headerlink" title="非变异方法: 不会改变原数组,总是返回一个新数组"></a>非变异方法: 不会改变原数组,总是返回一个新数组</h3></li><li>filter concat slice map some <h3 id="显示过滤-排序结果"><a href="#显示过滤-排序结果" class="headerlink" title="显示过滤/排序结果"></a>显示过滤/排序结果</h3></li><li>有时,我们希望显示一个数组的过滤或者排序副本,但是不改变或重置原始数据,在这种情况下,可以创建或者返过滤或者排序数组的计算属性</li></ul><h3 id="Vue中的v-if与v-show的区别"><a href="#Vue中的v-if与v-show的区别" class="headerlink" title="Vue中的v-if与v-show的区别"></a>Vue中的v-if与v-show的区别</h3><blockquote><p>v-if的特点</p><ul><li>有较高的切换消耗,每次都会重新删除或者创建的元素.就是说,如果你每次都需要删除和切换频率很高的时候建议使用v-show<br>v-show的特点</li><li>每次不会重新进行dom元素的创建和删除,只是通过display属性切换元素的属性(display:none)不会占据原来的空间,有较高的初始渲染消耗</li><li>总结v-if有较高的切换消耗,v-show有较高的初始渲染消耗</li><li>元素需要频繁切换时,使用v-show,当运行条件不大可能改变的时候可以使用v-if.</li></ul></blockquote><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><ul><li>因为javascript的限制,Vue.js不能检测到下面数组的变化</li></ul><ol><li>直接用索引设置元素,如vm.items[0] = {}</li></ol><ul><li>为了解决这个问题,Vue.js扩展了观察数组,为它添加了一个$set()方法</li><li><code>example.items.$set(0,{childmsg:&#39;Changed!&#39;})</code></li></ul><ol start="2"><li>修改数据的长度,如vm.items.length= 0</li></ol><ul><li>至于这个问题,只需要使用一个空数组替换items.除了$set方法,Vue.js也为观察数组提供了$remove方法,用于从目标数组中查找并删除元素,在它内部调用它splice().因此,不必这样<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var index = this.items.indexOf(item)</span><br><span class="line">if(index!=-1)&#123;</span><br><span class="line">    this.items.splice(index,1)</span><br><span class="line">&#125;</span><br><span class="line">只用这样`this.items.$remove(item);</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;插槽&quot;&gt;&lt;a href=&quot;#插槽&quot; class=&quot;headerlink&quot; title=&quot;插槽&quot;&gt;&lt;/a&gt;插槽&lt;/h2&gt;&lt;h3 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;headerlink&quot; title=&quot;概念&quot;
      
    
    </summary>
    
      <category term="Vue基础语法" scheme="http://yoursite.com/categories/Vue%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/"/>
    
    
      <category term="-Vue -基础" scheme="http://yoursite.com/tags/Vue-%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>原型对象总结</title>
    <link href="http://yoursite.com/2019/04/07/%E5%8E%9F%E5%9E%8B%E5%AF%B9%E8%B1%A1%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2019/04/07/原型对象总结/</id>
    <published>2019-04-07T14:03:20.000Z</published>
    <updated>2019-04-08T00:01:29.067Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h2 id="原型对象"><a href="#原型对象" class="headerlink" title="原型对象"></a>原型对象</h2><blockquote><p>函数的prototype属性</p><ul><li>每个函数都有一个prototype属性,它默认指向一个Object空对象(即称为:原型对象)</li><li>原型对象中有一个constructor,它指向函数对象</li></ul></blockquote><ul><li>给原型对象添加属性(一般都是方法)<ul><li>作用: 函数的实例对象自动拥有原型中的属性(方法)</li><li>实例对象可以引用原型对象添加的属性(一般是方法);<blockquote><p>显式原型和隐式原型</p></blockquote></li></ul></li><li>每个函数fucntion都有一个prototype,即显式原型</li><li>每个实例对象都有一个<strong>proto</strong>,称为隐式原型</li><li>实例对象的隐性原型对应的值,为其对应的构造函数的显式原型的值</li><li>总结:</li><li>函数的prototype属性:在定义函数时自动添加,默认值是一个空Object对象(也就是执行函数定义时自动添加了prototype属性)</li><li>注意prototype保存的值是地址值,它是一个引用变量属性.</li><li>函数的<strong>proto</strong>属性:在创建对象时自动添加,默认值为prototype的值</li><li><p>程序员能直接操作显式对象,但不能直接操作隐式对象(ES6之前)</p></li><li><p>执行函数定义与执行函数的区别</p><ul><li>执行函数定义的时候,函数体还没有执行,只是定义了函数,本质上只是创建了一个函数对象 </li><li>加()的时候函数体才会执行 调用 </li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;原型对象&quot;&gt;&lt;a href=&quot;#原型对象&quot; class=&quot;headerlink&quot; title=&quot;原型对象&quot;&gt;&lt;/a&gt;原型对象&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;函数的prototype属性&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;每个函
      
    
    </summary>
    
      <category term="面向对象" scheme="http://yoursite.com/categories/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    
    
      <category term="-Javascript -面向对象" scheme="http://yoursite.com/tags/Javascript-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    
  </entry>
  
</feed>
