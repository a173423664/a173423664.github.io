<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>CrissWuBlog</title>
  
  <subtitle>成為一個厲害得普通人</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-04-14T09:19:03.831Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Criss Wu</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>前端面试题总结</title>
    <link href="http://yoursite.com/2019/04/13/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2019/04/13/前端面试题总结/</id>
    <published>2019-04-13T12:33:00.000Z</published>
    <updated>2019-04-14T09:19:03.831Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前端面试题总结"><a href="#前端面试题总结" class="headerlink" title="前端面试题总结"></a>前端面试题总结</h2><h3 id="什么是CSS预处理"><a href="#什么是CSS预处理" class="headerlink" title="什么是CSS预处理"></a>什么是CSS预处理</h3><ul><li>css预处理定义:<ul><li>定义了一种新的语言,其基本思想是同一种专门变成语言,为CSS增加了一些编程特性,将css作为目标生成文件,然后开发者就只要使用这种语言进行编码工作</li></ul></li><li>几种预处理语言<ul><li>sass</li><li>less</li><li>stylus</li><li>burbine</li><li>switch css</li><li>dt css</li><li>css cacheer</li></ul></li></ul><h3 id="Javascript中的定时器有哪些？他们的区别及用法是什么？"><a href="#Javascript中的定时器有哪些？他们的区别及用法是什么？" class="headerlink" title="Javascript中的定时器有哪些？他们的区别及用法是什么？"></a>Javascript中的定时器有哪些？他们的区别及用法是什么？</h3><ul><li>setTimeOut 只会执行一次</li><li>setInterval 会一直重复执行</li></ul><h3 id="请描述一下cookies-sessionStorage与loaclStorage区别"><a href="#请描述一下cookies-sessionStorage与loaclStorage区别" class="headerlink" title="请描述一下cookies sessionStorage与loaclStorage区别"></a>请描述一下cookies sessionStorage与loaclStorage区别</h3><ul><li>相同点:都存储在客户端</li><li>不同点:</li></ul><ol><li>存储大小<ul><li>cookies数据大小不能超过4k</li><li>sessionStorage和localStorage虽然也有大小的限制,但是比cookie大的多,可以达到5M或更大</li></ul></li><li>有效时间<ul><li>loaclStorage存储持久数据,在浏览器关闭后数据不会丢失,除非主动删除</li><li>sessionStorage数据在浏览器关闭后数据自动删除</li><li>cookie设置的cookie过期时间之前一直有效，即使窗口或浏览器关闭</li></ul></li><li>数据与服务器之间的交互方式<ul><li>cookie的数据会自动的传递到服务器，服务器端也可以写cookie到客户端</li><li>sessionStorage和localStorage不会自动把数据发给服务器，仅在本地保存</li></ul></li></ol><h3 id="编写一个方法去掉数组里面-重复的内容-var-arr-1-2-3-4-5-1-2-3"><a href="#编写一个方法去掉数组里面-重复的内容-var-arr-1-2-3-4-5-1-2-3" class="headerlink" title="编写一个方法去掉数组里面 重复的内容  var arr=[1,2,3,4,5,1,2,3]"></a>编写一个方法去掉数组里面 重复的内容  var arr=[1,2,3,4,5,1,2,3]</h3><p><strong>一个数组去重的实现</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">var arr = [&apos;abc&apos;,&apos;abcd&apos;,&apos;sss&apos;,&apos;2&apos;,&apos;d&apos;,&apos;t&apos;,&apos;2&apos;,&apos;ss&apos;,&apos;f&apos;,&apos;22&apos;,&apos;d&apos;];</span><br><span class="line">//定义一个新的数组</span><br><span class="line">var s = [];</span><br><span class="line">//遍历数组</span><br><span class="line">for(var i = 0;i&lt;arr.length;i++)&#123;</span><br><span class="line">    if(s.indexOf(arr[i]) == -1)&#123;  //判断在s数组中是否存在，不存在则push到s数组中</span><br><span class="line">        s.push(arr[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">console.log(s);</span><br><span class="line">//输出结果：[&quot;abc&quot;, &quot;abcd&quot;, &quot;sss&quot;, &quot;2&quot;, &quot;d&quot;, &quot;t&quot;, &quot;ss&quot;, &quot;f&quot;, &quot;22&quot;]</span><br></pre></td></tr></table></figure></p><h3 id="计算一个数组arr所有元素的和"><a href="#计算一个数组arr所有元素的和" class="headerlink" title="计算一个数组arr所有元素的和"></a>计算一个数组arr所有元素的和</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">var arr1=[1,2,3,4,5,6,7,8,9];</span><br><span class="line">var sum1=0;</span><br><span class="line">for (var i=0;i&lt;=arr1.length;i++) &#123;</span><br><span class="line">if (typeof arr1[i]==&quot;number&quot;) &#123;</span><br><span class="line">sum1+=arr1[i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">document.write(sum1);</span><br></pre></td></tr></table></figure><h3 id="ajax的步骤"><a href="#ajax的步骤" class="headerlink" title="ajax的步骤"></a>ajax的步骤</h3><blockquote><p></p><p style="color:red;font-weight:bold">什么是ajax</p> <p></p><ul><li>ajax(异步javascript xml)能够刷新局部网页数据,而不是重新加载整个网页</li><li>如何使用ajax<ol><li>第一步,创建xmlhttpquest对象,var xmlhttp = new XMLhttpRequest();XMLHttpRequest对象用来和服务器交换数据</li><li>第二步,使用xmlhttpquest对象的open()和send()方法发送资源请求给服务器</li><li>第三部,使用xmlhttpquest对象的responseText和responseXML属性获取服务器的响应</li><li>第四步,onreadystatechange函数,当发送请求到服务器,我们想要服务器响应执行一些功能,就需要使用onreadystatechange函数,每次xmlhttpquest对象的readystate发生改变都会触发onreadystatechange函数</li></ol></li></ul></blockquote><h3 id="XML和json的区别"><a href="#XML和json的区别" class="headerlink" title="XML和json的区别"></a>XML和json的区别</h3><ul><li>json相对XML来讲,数据的体积更小,传递的速度更快</li><li>JSON与javaScript交互更加方便,更容易解析处理,更好的进行数据交互</li><li>XML对数据的描述比比价好</li><li>JSON的速度要远远快于XML</li></ul><h3 id="清除浮动的方法"><a href="#清除浮动的方法" class="headerlink" title="清除浮动的方法"></a>清除浮动的方法</h3><ol><li>父div定义height</li></ol><ul><li>原理:父级div手动定义height,就解决了父级div无法自动获取高度的问题</li><li>缺点:只适合高度固定的布局,要给出精确的高度,如果高度和父级div不一样,会产生问题</li></ul><ol start="2"><li>结尾处加上空div标签:clear:both</li></ol><ul><li>原理: 添加一个空的div,利用css提高的clear:both清除浮动,让父级div自动就能获取到高度</li></ul><ol start="3"><li>父级div定义 伪类:after 和 zoom</li></ol><ul><li>原理：IE8以上和非IE浏览器才支持:after，原理和方法2有点类似，zoom(IE转有属性)可解决ie6,ie7浮动问题 </li></ul><ol start="4"><li>父级div定义 overflow:hidden</li></ol><ul><li>原理：必须定义width或zoom:1，同时不能定义height，使用overflow:hidden时，浏览器会自动检查浮动区域的高度</li><li>缺点：不能和position配合使用，因为超出的尺寸的会被隐藏。 </li></ul><h3 id="box-sizing常用的属性有哪些？分别有什么作用？"><a href="#box-sizing常用的属性有哪些？分别有什么作用？" class="headerlink" title="box-sizing常用的属性有哪些？分别有什么作用？"></a>box-sizing常用的属性有哪些？分别有什么作用？</h3><ul><li>属性值<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">box-sizing：content-box</span><br><span class="line">box-sizing：border-box</span><br><span class="line">box-sizing：inherit</span><br></pre></td></tr></table></figure></li></ul><p><strong>content-box</strong></p><pre><code>- 这是box-sizing的默认属性值- 在CSS中定义的宽度和高度对应元素的内容框- 在CSS中定义的宽度和高度之外绘制元素的内外边距和边框 </code></pre><p><strong>border-box</strong></p><pre><code>- 在CSS中微元素设定的宽度和高度就决定了元素的边框的盒- 即为元素的内边框和边框是在已经定义好的宽度和高度之间之内绘制的- CSS中的设定的高度和宽度减去边框的内外边距,才能得到元素内容所占的实际宽度和高度</code></pre><ul><li>即centent-box是在定义的宽度的高度之外绘制元素的内边距和边框(元素的默认效果)</li><li>border-box:元素指定的任何内边框和边框都将在定义的高度和宽度之间的进行绘制,通过已设定的高度和宽度减去内边距和边框的和得到的才是内容的宽度和高度</li></ul><h3 id="CSS选择器有哪些-选择器的权重的优先级"><a href="#CSS选择器有哪些-选择器的权重的优先级" class="headerlink" title="CSS选择器有哪些?选择器的权重的优先级"></a>CSS选择器有哪些?选择器的权重的优先级</h3><p><strong>选择器类型</strong></p><ol><li>id选择器 #id</li><li>class选择器 .calss</li><li>标签选择器 p</li><li>通用 *</li><li>属性选择器 [type=”text”]</li><li>伪类选择器 :hover</li><li>伪元素选择器 ::first-line</li><li>子选择器,相邻选择器</li></ol><p><strong>权重</strong></p><ol><li>第一等:表示内联样式,如style=””,权值1000</li><li>第二等:id选择器 权值为100</li><li>第三等:class选择器 权值为10</li><li>第四等:代表类型选择器和伪元素选择器,如div p 权值为1</li><li>通配符,子选择器,相邻选择器等的.如.&gt;.+权值为0</li><li>继承样式没有权值</li></ol><h3 id="js有几种数据类型-其中基本数据类型有哪些"><a href="#js有几种数据类型-其中基本数据类型有哪些" class="headerlink" title="js有几种数据类型,其中基本数据类型有哪些?"></a>js有几种数据类型,其中基本数据类型有哪些?</h3><ul><li>五种基本数据类型:undefined,Null,Bollean,Number和String</li><li>一种复杂数据类型-Object,Object本质上是由一组无序的名值对组成</li><li>Object,Array,Function则属于引用数据类型</li></ul><h3 id="undefined和null的区别"><a href="#undefined和null的区别" class="headerlink" title="undefined和null的区别"></a>undefined和null的区别</h3><ul><li>null:Null类型,代表是空值,代表一个空对象的指针,使用typeof运算得到一个object,所以你可以认为它是一个特殊的对象值</li><li>undefined:Undefined类型,当一个声明了的变量没有初始化,得到的值就是undefined</li><li>null是javascript关键字,可以认为是对象类型,它是一个空对象指针,和其他语言一样都代表是”空值”</li><li>javaScript权威指南:null 和 undefined 都表示“值的空缺”，你可以认为undefined是表示系统级的、出乎意料的或类似错误的值的空缺，而null是表示程序级的、正常的或在意料之中的值的空缺。</li></ul><h3 id="http和https有何区别-如何灵活使用"><a href="#http和https有何区别-如何灵活使用" class="headerlink" title="http和https有何区别?如何灵活使用"></a>http和https有何区别?如何灵活使用</h3><ul><li>http是HTTP协议运行在TCP之上.所有传输的内容都是明文,客户端和服务器端都无法验证对方的身份</li><li>htpps是HTTP运行SSL/TLS之上,SSL/TLS运行在TCP之上.所有传输都经过加密,加密采用对称加密.</li></ul><h3 id="原型链的解释"><a href="#原型链的解释" class="headerlink" title="原型链的解释"></a>原型链的解释</h3><ul><li>由于<em>proto</em>是任何对象都有的属性,而js里万物都有对象,所以会形成一条由<em>proto</em>连起来的链条,递归访问_proto必须最终到头,并且值是null</li></ul><blockquote><p><strong>属性的设置</strong></p><ul><li>读取对象属性时,会自动在原型链的中查找</li><li>设置对象属性时,不会查找原型链,如果是当时中没有的属性,直接添加属性并设置此值</li><li>方法一般定义在原型中.属性一般通过构造函数定义在函数本身.</li></ul></blockquote><ul><li>注意这里有一个特别的函数Function() 它是new自己创建的.它自己的显式原型与隐式原型属性指向同一个原型对象</li></ul><h3 id="对前端路由的理解-前后端路由的区别"><a href="#对前端路由的理解-前后端路由的区别" class="headerlink" title="对前端路由的理解?前后端路由的区别?"></a>对前端路由的理解?前后端路由的区别?</h3><ul><li><p>前端路由和后端路由在实现原理上不一样,但是原理都是一样的.在HTML的history API出现之前,前端的路由都是通过hash来实现的,hash能兼容低版本的浏览器哦</p></li><li><p><strong>服务器路由</strong>:每次跳转到不同URL,都是重新访问服务端,然后服务端返回页面,页面也可以是服务端获取数据，然后和模板组合，返回HTML，也可以是直接返回模板HTML，然后由前端JS再去请求数据，使用前端模板和数据进行组合，生成想要的HTML。</p></li><li><p><strong>前端路由</strong>:每次跳转到不同URL都是使用前端的锚点路由.实际上只是JS根据URL来操作DOM元素，根据每个页面需要的去服务端请求数据，返回数据后和模板进行组合，当然模板有可能是请求服务端返回的，这就是 SPA 单页程序。</p></li></ul><h3 id="解释一下call函数和apply函数的作用-及其用法"><a href="#解释一下call函数和apply函数的作用-及其用法" class="headerlink" title="解释一下call函数和apply函数的作用,及其用法"></a>解释一下call函数和apply函数的作用,及其用法</h3><blockquote><p><strong>改变对象的内部指针,即改变对象的this指向问题</strong></p><ol><li>call()</li></ol><ul><li>语法:<code>obj1.call(obj2[,param1,param2,...])</code> 定义:用obj2对象代替obj1,并且调用obj1的方法.即将obj1应用到obj2上;</li><li>说明: call方法可以用来代替另一个对象调用一个方法,call方法可将一个函数的对象上下文从初始的上下文改变为由obj2指定的新对象,扩充对象的能力</li></ul><ol start="2"><li>apply()</li></ol><ul><li>语法: <code>obj1.call(obj2[,arrArg])</code>,定义：用obj2对象来代替obj1，调用obj1的方法，即将obj1应用到obj2上，说明：call ()和apply()作用一样，但是call()可以接收任何类型的参数，而apply()只能接收数组参数。</li></ul></blockquote><h3 id="作用域与执行上下文的区别"><a href="#作用域与执行上下文的区别" class="headerlink" title="作用域与执行上下文的区别"></a>作用域与执行上下文的区别</h3><ol><li>对应的创建和产生的时间:作用域是函数被定义的时候产生的,执行上下文是函数被调用,代码执行之前</li><li>活动状态:作用域是静态的,定义好了就一直存在,且不会发生变化,上下文环境是动态的,函数调用的时候创建,函数调用结束时,被释放.</li><li>从属关系:执行上下文环境,从属于所在的作用域</li></ol><h4 id="为什么会存在函数名-变量名提升"><a href="#为什么会存在函数名-变量名提升" class="headerlink" title="为什么会存在函数名,变量名提升?"></a>为什么会存在函数名,变量名提升?</h4><ul><li>就是在执行上下文的预处理,在执行全局数据或者局部数据之前,对全集数据进行预处理,比如var定义的全局变量==&gt;undefined,添加为window的属性</li></ul><h3 id="执行下上文"><a href="#执行下上文" class="headerlink" title="执行下上文"></a>执行下上文</h3><ul><li>代码分类(位置)<ul><li>全局代码</li><li>函数(局部)代码</li></ul></li><li>执行全局上下文<ul><li>在执行全局代码前,将window确定全局执行上下文对象</li></ul></li><li>对全局数据进行预处理,<ul><li>var定义的全局变量==&gt;undefined,添加为window的属性</li><li>function声明的全局函数,==&gt;赋值(fun),添加为window的方法</li><li>this==&gt;赋值(window)</li></ul></li><li><p>开始执行全局代码</p></li><li><p>函数执行上下文</p><ul><li>在调用函数,准备执行函数体之前,创建对应的函数执行上下文对象.(存在于栈中,虚拟的).</li><li>对局部数据进行预处理<ul><li>形参变量赋值为实参, ==&gt;添加为执行上下文的属性.</li><li>arguments==&gt;赋值(实参列表)==&gt;添加为执行上下文的属性.</li><li>var定义的局部变量==&gt;undefined,==&gt;添加为执行上下文的属性.</li><li>function声明的函数==&gt;赋值(fun)==&gt;添加为执行上下文的方法.</li><li>this==&gt;(赋值)调用函数的对象.</li></ul></li><li>调用函数(次数),window.导致产生执行上下文栈 (后进先出).数据进行预处理</li></ul></li><li><p>在js代码执行前,js引擎就会创建一个栈来管理所有的执行上下文对象(虚拟的)</p></li><li>在全局执行上下文(window)创建后,将其添加上到栈中</li><li>在当函数执行完后,将栈顶的对象移出(出栈)</li><li>当所有代码执行完毕后,栈中只剩下window</li></ul><h3 id="实例与对象的区别"><a href="#实例与对象的区别" class="headerlink" title="实例与对象的区别"></a>实例与对象的区别</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var person = new Object();</span><br><span class="line">var person = &#123;&#125;;</span><br></pre></td></tr></table></figure><ul><li>通过new object创建的对象,可以称之为object的实例</li><li>第二个采用对象字面量的形式生成的person也是如此.</li><li>但是他没有调用new object(),而是通过JSON()初始化的方式</li><li>将现有的引用指向person</li><li>对象与实例的区别<ul><li>实例是对象的具象化产品</li><li>而对象是一个具有多种属性的内容结构.</li><li>实例都是对象,但是对象不全部是实例</li></ul></li><li>实例与对象的区别总结: </li></ul><ol><li>实例是对象的具体化产品,而对象是一个具有多种属性的内容结构.</li><li>实例一定是对象,但是对象不全都是实例.</li></ol><h3 id="继承问题"><a href="#继承问题" class="headerlink" title="继承问题"></a>继承问题</h3><blockquote><p><strong>object</strong>构造函数模式</p><ul><li>套路:先创建一个空的object对象,再动态的添加属性/方法</li><li>使用场景:起始不太确定对象内部数据</li><li>语句太多</li></ul></blockquote><blockquote><p><strong>对象字面量模式</strong></p><ul><li>套路:使用{}创建对象,同时指定属性/方法</li><li>使用场景:起始时,对象内部数据是确定的,适用于创建单个对象</li><li>问题:如果创建多个对象,有重复代码,<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">var user = &#123;</span><br><span class="line">name: &apos;张三&apos;,</span><br><span class="line">age: 30,</span><br><span class="line">say:function () &#123;</span><br><span class="line">alert(&apos;hello,world!&apos;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></blockquote><blockquote><p><strong>工厂创建模式</strong></p><ul><li>套路:通过工厂函数动态创建对象并返回</li><li>使用场景:需要创建多个对象</li><li>问题:对象没有一个具体的类型.都是Object类型 (区分不开类型)<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">function createPerson(name, age, job)&#123;</span><br><span class="line">var o = new Object();</span><br><span class="line">o.name = name;</span><br><span class="line">o.age = age;</span><br><span class="line">o.job = job;</span><br><span class="line">o.sayName = function()&#123;</span><br><span class="line">alert(this.name);</span><br><span class="line">&#125;;</span><br><span class="line">return o;</span><br><span class="line">&#125;</span><br><span class="line">var person1 = createPerson(&quot;Nicholas&quot;, 29, &quot;Software Engineer&quot;);</span><br><span class="line">var person2 = createPerson(&quot;Greg&quot;, 27, &quot;Doctor&quot;);</span><br></pre></td></tr></table></figure></li></ul></blockquote><blockquote><p><strong>自定义构造函数模式</strong></p><ul><li>套路:自定义构造函数,通过new创建对象</li><li>使用场景:需要创建多个类型创建的对象</li><li>问题:每个对象都要相同的数据,浪费内存<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">function Person(name, age, job)&#123;</span><br><span class="line">this.name = name;</span><br><span class="line">this.age = age;</span><br><span class="line">this.job = job;</span><br><span class="line">// this在此时无法知道指向谁,必须等到调用的时候才确定</span><br><span class="line">this.sayName = function()&#123;</span><br><span class="line">alert(this.name);</span><br><span class="line">&#125;;</span><br><span class="line">&#125;</span><br><span class="line">// 如果使用关键词new,那么this指向 创建出来的实例对象本身</span><br><span class="line">var person1 = new Person(&quot;Nicholas&quot;, 29, &quot;Software Engineer&quot;);</span><br><span class="line">var person2 = new Person(&quot;Greg&quot;, 27, &quot;Doctor&quot;);</span><br></pre></td></tr></table></figure></li></ul></blockquote><p><strong>组合使用构造函数模式和原型模式</strong></p><ul><li>创建自定义类型的最常见方式，就是组合使用构造函数模式与原型模式</li><li><p>构造函数模式用于定义实例属性，而原型模式用于定义方法和共享的属性。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">function Person(name, age, job)&#123;</span><br><span class="line">this.name = name;</span><br><span class="line">this.age = age;</span><br><span class="line">this.job = job;</span><br><span class="line">this.friends = [&quot;Shelby&quot;, &quot;Court&quot;];</span><br><span class="line">&#125;</span><br><span class="line">Person.prototype = &#123;</span><br><span class="line">constructor : Person,</span><br><span class="line">sayName : function()&#123;</span><br><span class="line">alert(this.name);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">var person1 = new Person(&quot;Nicholas&quot;, 29, &quot;Software Engineer&quot;);</span><br><span class="line">var person2 = new Person(&quot;Greg&quot;, 27, &quot;Doctor&quot;);</span><br><span class="line">person1.friends.push(&quot;Van&quot;);</span><br><span class="line">alert(person1.friends); //&quot;Shelby,Count,Van&quot;</span><br><span class="line">alert(person2.friends); //&quot;Shelby,Count&quot;</span><br></pre></td></tr></table></figure></li><li><p>好处:每个实例都有自己的一份实例属性的副本,但是同时又共享着对方法的引用,最大限度地节省了内存.这种混成模式还支持向构造函数传递参数,可谓是集两种模式之长</p></li></ul><p><strong>区别:</strong></p><ul><li>没有显示的创建对象</li><li>没有直接将属性和方法赋值给this对象</li><li>没有return语句</li><li><p>创建自定义构造函数意味着将来可以将它的实例标识为一种特定的类型,而这正是构造函数模式胜过工厂模式的地方</p></li><li><p>要创建Person的新实例,必须使用new操作符.以这种方式调用构造函数会经历以下四个步骤</p></li></ul><ol><li>创建一个新对象</li><li>将构造函数作用域赋值给新对象(因此this就指向了这个对象)</li><li>执行构造函数中的代码(为这个新对象添加属性)</li><li>返回新对象</li></ol><h3 id="检测数据类型的方法"><a href="#检测数据类型的方法" class="headerlink" title="检测数据类型的方法"></a>检测数据类型的方法</h3><ul><li>typeof 只能检测基本数据类型,对于复杂数据类型,都是object</li><li>insaneof 用来检测对象的类型,返回值为布尔值</li></ul><h3 id="TCP-IP-HTTP的区别"><a href="#TCP-IP-HTTP的区别" class="headerlink" title="TCP/IP HTTP的区别"></a>TCP/IP HTTP的区别</h3><ul><li>TPC/IP协议是传输层协议,主要解决数据如何在网络中传输.而HTTP是应用层协议，主要解决如何包装数据。</li><li>可以这样理解,我们在传输数据时,可以只使用(传输层)TCP/IP协议,但是那样的话,如果没有应用层协议,便无法识别数据,如果想要使传输的数据有意义，则必须使用到应用层协议，WEB使用HTTP协议作应用层协议，以封装HTTP文本信息，然后使用TCP/IP做传输层协议将它发到网络上.</li><li>术语TCP/IP代表传输控制协议/网际协议,把IP想像成一种高速公路，它允许其它协议在上面行驶并找到到其它电脑的出口。TCP和UDP是高速公路上的“卡车”，它们携带的货物就是像HTTP，文件传输协议FTP这样的协议等.</li><li>TCP有一个特殊的机制来确保数据安全的不出错的从一个端点传到另一个端点，而UDP不提供任何这样的保证。</li><li>HTTP(超文本传输协议)是利用TCP在两台电脑(通常是Web服务器和客户端)之间传输信息的协议.客户端使用web浏览器发起HTTP请求给web服务器.Web服务器发送被请求的信息给客户端</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前端面试题总结&quot;&gt;&lt;a href=&quot;#前端面试题总结&quot; class=&quot;headerlink&quot; title=&quot;前端面试题总结&quot;&gt;&lt;/a&gt;前端面试题总结&lt;/h2&gt;&lt;h3 id=&quot;什么是CSS预处理&quot;&gt;&lt;a href=&quot;#什么是CSS预处理&quot; class=&quot;header
      
    
    </summary>
    
      <category term="前端面试" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/"/>
    
    
      <category term="面试" scheme="http://yoursite.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>Sass学习笔记</title>
    <link href="http://yoursite.com/2019/04/13/sass%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2019/04/13/sass学习笔记/</id>
    <published>2019-04-13T10:56:39.000Z</published>
    <updated>2019-04-13T12:32:09.980Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Sass学习笔记-sass学习入门"><a href="#Sass学习笔记-sass学习入门" class="headerlink" title="Sass学习笔记,sass学习入门"></a>Sass学习笔记,sass学习入门</h2><h3 id="sass是css预处理器"><a href="#sass是css预处理器" class="headerlink" title="sass是css预处理器"></a>sass是css预处理器</h3><ul><li>sass是基于ruby的,使用sass我们需要安装ruby</li><li>sass和scss其实是同一种东西,我们平时都称之为sass,两者不同之处有以下两点:</li></ul><ol><li>文件扩展名不同，Sass 是以“.sass”后缀为扩展名，而 SCSS 是以“.scss”后缀为扩展名</li><li>语法书写方式不同，Sass 是以严格的缩进式语法规则来书写，不带大括号({})和分号(;)，而 SCSS 的语法书写和我们的 CSS 语法书写方式非常类似。<h3 id="为什么要使用Sass"><a href="#为什么要使用Sass" class="headerlink" title="为什么要使用Sass"></a>为什么要使用Sass</h3></li><li>因为css代码重复利用少,管理起来不方便,而用Sass来写代码可以使代码复用.方便快捷修改,比如要修改整站的某种颜色,只需要修改一个变量即可,</li><li>或者对仅使用过一次的属性值,你可以赋予其一个简单易懂的变量名,让人一眼就知道这个属性值的用途.<h3 id="什么是css-reset"><a href="#什么是css-reset" class="headerlink" title="什么是css reset?"></a>什么是css reset?</h3></li></ol><ul><li>HTML标签在浏览器中都有默认的样式,不同浏览器的默认样式之间存在差别.列入ul默认带有缩进的样式,在IE浏览器中,它的缩进是由margin实现的,而在Firefox下却是由padding实现的,开发时的默认样式可能会给我们带来许多浏览器兼容性的问题,影响开发效率.现在很流行的一种方法就是一开始将浏览器的默认样式全部覆盖掉,这就是CSS reset<h3 id="编译Sass"><a href="#编译Sass" class="headerlink" title="编译Sass"></a>编译Sass</h3></li><li>单文件转换命令<br><code>sass input.scss output.css</code></li><li>单文件监听命令<br><code>sass --watch input.scss:output.css</code></li><li>如果你有很多的sass文件的目录，你也可以告诉sass监听整个目录：<br><code>sass --watch app/sass:public/stylesheets</code></li></ul><h2 id="sass语法"><a href="#sass语法" class="headerlink" title="sass语法"></a>sass语法</h2><h3 id="变量声明"><a href="#变量声明" class="headerlink" title="变量声明"></a>变量声明</h3><ul><li>Sass使用$符号来标识变量(老版本使用!符号)比如$<code>sidebar-width</code>;</li><li>为什么选择$符号呢？因为它好认、更具美感，且在CSS中并无他用，不会导致与现存或未来的css语法冲突。<h3 id="css嵌套"><a href="#css嵌套" class="headerlink" title="css嵌套"></a>css嵌套</h3></li><li>父选择器的标识符&amp;<h3 id="import"><a href="#import" class="headerlink" title="@import"></a>@import</h3></li><li>导入公共样式</li><li>可以省略.scss后缀<h3 id="原生的css导入"><a href="#原生的css导入" class="headerlink" title="原生的css导入"></a>原生的css导入</h3></li><li>因为sass的语法完全兼容css，所以把原始的css文件改名为.scss后缀，即可直接导入了。</li><li>注意:// 这种注释不会出现在已经生成的css文件中<h3 id="混合器"><a href="#混合器" class="headerlink" title="混合器"></a>混合器</h3></li><li>混合器使用@mixin标识符定义.</li><li><p>使用@include引用变量</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@mixin rounded-corners &#123;</span><br><span class="line">  -moz-border-radius: 5px;</span><br><span class="line">  -webkit-border-radius: 5px;</span><br><span class="line">  border-radius: 5px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>使用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">notice &#123;</span><br><span class="line">  background-color: green;</span><br><span class="line">  border: 2px solid #00aa00;</span><br><span class="line">  @include rounded-corners;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><ul><li><p>通过选择器继承继承样式(@extend)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">.error &#123;</span><br><span class="line">  border: 1px solid red;</span><br><span class="line">  background-color: #fdd;</span><br><span class="line">&#125;</span><br><span class="line">.seriousError &#123;</span><br><span class="line">  @extend .error;</span><br><span class="line">  border-width: 3px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>注意:不要继承后代样式</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Sass学习笔记-sass学习入门&quot;&gt;&lt;a href=&quot;#Sass学习笔记-sass学习入门&quot; class=&quot;headerlink&quot; title=&quot;Sass学习笔记,sass学习入门&quot;&gt;&lt;/a&gt;Sass学习笔记,sass学习入门&lt;/h2&gt;&lt;h3 id=&quot;sass是
      
    
    </summary>
    
      <category term="sass" scheme="http://yoursite.com/categories/sass/"/>
    
    
      <category term="Sass基础语法" scheme="http://yoursite.com/tags/Sass%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Vue路由基础知识总结</title>
    <link href="http://yoursite.com/2019/04/10/Vue%E8%B7%AF%E7%94%B1/"/>
    <id>http://yoursite.com/2019/04/10/Vue路由/</id>
    <published>2019-04-10T14:16:51.000Z</published>
    <updated>2019-04-12T03:30:32.633Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h2 id="Vue路由"><a href="#Vue路由" class="headerlink" title="Vue路由"></a>Vue路由</h2><h3 id="路由的概念"><a href="#路由的概念" class="headerlink" title="路由的概念"></a>路由的概念</h3><ul><li><strong>后端路由</strong>: 对于普通网页来说,所有的超链接都是URL地址,所有URL地址都对应服务器上对应的资源</li><li><strong>前端路由</strong>: 对于单页面用户来说,主要通过URL里面的hash(#号)来实现不同页面之间的切换,同时hash有一个特点:HTTP请求中不会包含相关的内容,所有单页面跳转主要用hash实现.在单页面程序中,这种通过hash来实现切换页面的方式,我们称之为前端路由.(区别于后端路由)</li></ul><h3 id="URL里面的hash有什么特点"><a href="#URL里面的hash有什么特点" class="headerlink" title="URL里面的hash有什么特点?"></a>URL里面的hash有什么特点?</h3><ul><li>思考这个问题…</li></ul><h3 id="router-routes-route之间的区别与联系"><a href="#router-routes-route之间的区别与联系" class="headerlink" title="router,routes,route之间的区别与联系"></a>router,routes,route之间的区别与联系</h3><ol><li>route,它是一条路由,由这个英文单词也可以看出来，它是单数， Home按钮  =&gt; home内容， 这是一条route,  about按钮 =&gt; about 内容， 这是另一条路由。</li><li>routes 是一组路由，把上面的每一条路由组合起来，形成一个数组。[{home 按钮 =&gt;home内容 }， { about按钮 =&gt; about 内容}]</li><li>router 是一个机制，相当于一个管理者，它来管理路由。因为routes 只是定义了一组路由，它放在哪里是静止的，当真正来了请求，怎么办？ 就是当用户点击home 按钮的时候，怎么办？这时router 就起作用了，它到routes 中去查找，去找到对应的 home 内容，所以页面中就显示了 home 内容。</li><li>路由的执行过程:当用户点击router-link标签时,会去寻找它的to属性,它的to属性和js中配置的路径(path:’/home’,component:Home)path一一对应,从而找到了组件,最后把组件渲染到了<code>&lt;router-view&gt;</code>标签所在的地方.所有的这些实现才是基于hash实现的</li></ol><h3 id="使用路由的基本步骤"><a href="#使用路由的基本步骤" class="headerlink" title="使用路由的基本步骤"></a>使用路由的基本步骤</h3><ol><li>安装路由模块,导入后自动拥有hash路由,可以在网站上显示看到#</li><li>创建一个组件模板对象</li><li>创建一个路由实例对象,当导入vue-router包之后,在window全局对象中,就有了一个路由构造器<ul><li>其中在new路由对象的时候,可以为构造函数,传递一个配置对象</li><li>这个配置对象实际就是路由匹配规则的意思</li><li>每个路由规则都是一个对象,这个规则对象中有两个必须的属性</li><li>path表示监听,拦截路由的地址</li><li>component表示,根据path拦截到对应的路由匹配地址,则展示对应当前路由地址的component组件</li><li>注意:component属性值必须是一个组件模板对象,而不能是组件的引入名称</li></ul></li><li>通过router属性,将路由规则对象注册到vm实例上,用来监听URL地址的变化,展示对应的组件.</li><li>组件需要在页面中展示,就需要Vue提供的router-view相当于一个标签属性,我们可以把它当做一个占位符.将来根据路由规则匹配到的组件,就会展示在这个router-view</li><li>router-link 默认渲染a标签 (tag可以改变展示的标签)</li></ol><h3 id="vue使用params-query传参的区别"><a href="#vue使用params-query传参的区别" class="headerlink" title="vue使用params,query传参的区别"></a>vue使用params,query传参的区别</h3><p><strong>params</strong>：/router1/:id ，/router1/123，/router1/789 ,这里的id叫做params</p><p><strong>query</strong>：/router1?id=123 ,/router1?id=456 ,这里的id叫做query。</p><ul><li>区别一: 路由设置这里,<strong>当你使用params方法传参时,要在路由后面加参数名</strong>,并且传参的时候,参数名要跟路由后面的设置的参数名对应,使用query方法，就没有这种限制，直接在跳转里面用就可以.</li><li>注意:如果路由上不写参数,也是可以传过去的,但是不会在URL上显示出你的参数,并且当你跳转到其他页面或者刷新页面的时候参数会丢失.那依赖的这个参数的http请求,或者其他的操作就会失败.</li><li>区别二:<strong>params一旦设置在路由上</strong>,params就是路由的一部分,如果这个路由有params传参,但是在跳转的时候,没有传这个参数,会导致跳转失败或者页面会没有内容.</li></ul><h3 id="push传参的三种方法及与replace的区别"><a href="#push传参的三种方法及与replace的区别" class="headerlink" title="push传参的三种方法及与replace的区别"></a>push传参的三种方法及与replace的区别</h3><ul><li>除了使用除了使用 <router-link> 创建 a 标签来定义导航链接,我们还可以借助 router 的实例方法,通过编写代码来实现. $router.push可以实现路由的跳转,这个方法会向 history 栈添加一个新的记录,所以,当用户点击浏览器后退按钮时,则回到之前的URL.</router-link></li><li>当你点击的时候,这个方法会在内部调用,所以说,点击<code>&lt;router-link :to=&quot;…&quot;&gt;</code> 等同于调用router.push(…).</li></ul><ol><li>第一种形式:字符串<code>this.$router.push(&#39;/about&#39;)</code></li><li>第二种形式:对象<code>this.$router.push({path:&#39;/about&#39;})</code></li><li>第三种形式:命名的路由,也是传入一个对象,如果一个路由有name属性.params跳转到某个详情页<code>this.$router.push({name:&#39;about&#39;})</code>在跳转到某个详情页的时候,还需要给parmas属性传入一个对象,对象里面包含详情页的内容.</li><li>总结: 由于动态路由也是传递params的,所以在this.$router.push()方法中path不能和params一起使用,否则params无效,需要使用name来指定页面,也就是说,除了path我们也可以使用路由的name属性来实现跳转页面</li><li>replace会将之前访问的路由替换成要跳转的路由.但是导航并不会留下history记录,即使点击返回按钮也不会回到页面,加上replace为true后,它不会向history添加新记录,而是跟它的方法名一样—替换掉当前的history记录.</li><li>params中保存的是一个对象类型的数据,里面存有路由路径中参数.</li></ol><h3 id="动态路由匹配"><a href="#动态路由匹配" class="headerlink" title="动态路由匹配"></a>动态路由匹配</h3><ul><li><p>我们常常需要把某种匹配模匹配到所有的路由,全部映射到同一个组件中。例如,我们有同一个User组件,对于所有ID各不相同的用户,都要使用这个组件来渲染.那么,我们可以在vue-router的路由路径中使用动态路径参数(dynamic segment)来达到这个效果.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">const User = &#123;</span><br><span class="line">  template: &apos;&lt;div&gt;User&lt;/div&gt;&apos;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const router = new VueRouter(&#123;</span><br><span class="line">  routes: [</span><br><span class="line">    // 动态路径参数 以冒号开头</span><br><span class="line">    &#123; path: &apos;/user/:id&apos;, component: User &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>/user/foo和/user/bar都将映射到相同的路由</p></li><li>一个路径参数使用:标记,当匹配一个路由时,参数值会被设置到{this.$router.params},可以在每个组件内使用,于是我们可以更新user模板,输出当前用户的ID.<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">const User = &#123;</span><br><span class="line">  template: &apos;&lt;div&gt;User &#123;&#123; $route.params.id &#125;&#125;&lt;/div&gt;&apos;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="响应路由参数的变化"><a href="#响应路由参数的变化" class="headerlink" title="响应路由参数的变化"></a>响应路由参数的变化</h3><ul><li>注意: 当使用路由参数时,例如从/user/bar导航到/user/foo,<strong>原来的组件将会被复用</strong>,因为两个路由都同时渲染同一个组件.比起销毁再创建,复用则显得效率更高效,不过这也意味着组件的生命周期钩子不会再被调用.复用组件的时候,如果想对路由参数的变化做出响应的话.你可以简单的watch:$route对象</li></ul><h3 id="路由注意事项"><a href="#路由注意事项" class="headerlink" title="路由注意事项"></a>路由注意事项</h3><p><strong>注意:exact-active与active的区别</strong><br>    exact是当前真正匹配的那个路由,active是匹配到exact路由经过的那个路由<br>    比如说 要匹配北京新闻详情里的路由,必须要经过上一个北京路径的这个路由</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;Vue路由&quot;&gt;&lt;a href=&quot;#Vue路由&quot; class=&quot;headerlink&quot; title=&quot;Vue路由&quot;&gt;&lt;/a&gt;Vue路由&lt;/h2&gt;&lt;h3 id=&quot;路由的概念&quot;&gt;&lt;a href=&quot;#路由的概念&quot; class=&quot;head
      
    
    </summary>
    
      <category term="Vue路由" scheme="http://yoursite.com/categories/Vue%E8%B7%AF%E7%94%B1/"/>
    
    
      <category term="Vue" scheme="http://yoursite.com/tags/Vue/"/>
    
      <category term="路由" scheme="http://yoursite.com/tags/%E8%B7%AF%E7%94%B1/"/>
    
  </entry>
  
  <entry>
    <title>Vue基础语法一</title>
    <link href="http://yoursite.com/2019/04/10/Vue%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95%E4%B8%80/"/>
    <id>http://yoursite.com/2019/04/10/Vue基础语法一/</id>
    <published>2019-04-10T14:14:31.000Z</published>
    <updated>2019-04-12T23:30:01.441Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h2 id="Vue基础之Vue模板语法"><a href="#Vue基础之Vue模板语法" class="headerlink" title="Vue基础之Vue模板语法"></a>Vue基础之Vue模板语法</h2><h3 id="插值"><a href="#插值" class="headerlink" title="插值"></a>插值</h3><ul><li>数据绑定最常见的的形式就是使用Mustache语法(双大括号)的文本插值,双大括号会将数据解析成纯文本<br><code>&lt;span&gt;Message:&lt;/span&gt;</code></li><li>如果Mustache标签将会被替代为对应数据对象上的msg属性的值.无论何时,绑定的数据对象上的msg属性发生了变化,</li><li>插值处的内容都会更新</li></ul><h3 id="纯HTML"><a href="#纯HTML" class="headerlink" title="纯HTML"></a>纯HTML</h3><ul><li>双大括号会将数据解释为纯文本,而非 HTML.为了输出真正的HTML,你需要使用v-html指令<br><code>&lt;div v-html=&quot;rawHtml&quot;&gt;&lt;/div&gt;</code></li><li>此时被插入的内容都会被当做HTML–数据绑定会被忽略<h3 id="过滤器"><a href="#过滤器" class="headerlink" title="过滤器"></a>过滤器</h3></li><li>Vue允许你自定义过滤器,来实现一些常见的文本格式化功能.过滤器应该被添加上mustache插值尾部,由”管道符”标识起来<br><code></code></li><li>过滤器可以串联</li><li>过滤器是javascript函数,因此可以接受参数<h3 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h3></li><li>指令是带有(Directives)是带有v-前缀的特殊属性,指令属性的值预期是单一javascript表达式(除了v-for,之后再讨论).指令的职责就是当其表达式的值时,相应的将某些行为应用到DOM上<h3 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h3></li><li>一些指令只能接受一个参数,在指令后以冒号指明,例如v-bind指令被用来更新HTML属性<br><code>&lt;a v-bind:href=&quot;url&quot;&gt;&lt;/a&gt;</code></li><li>在这里href是参数,告知v-bind指令将该元素的href属性与表达式url值绑定<h3 id="修饰符"><a href="#修饰符" class="headerlink" title="修饰符"></a>修饰符</h3></li><li>修饰符(Modifiers)是以半角句号.指明的特殊后缀,用于指出一个指令应该以特殊方法绑定</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;Vue基础之Vue模板语法&quot;&gt;&lt;a href=&quot;#Vue基础之Vue模板语法&quot; class=&quot;headerlink&quot; title=&quot;Vue基础之Vue模板语法&quot;&gt;&lt;/a&gt;Vue基础之Vue模板语法&lt;/h2&gt;&lt;h3 id=&quot;插值&quot;
      
    
    </summary>
    
      <category term="Vue基础语法" scheme="http://yoursite.com/categories/Vue%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/"/>
    
    
  </entry>
  
  <entry>
    <title>Vue计算属性</title>
    <link href="http://yoursite.com/2019/04/10/Vue%E8%AE%A1%E7%AE%97%E5%B1%9E%E6%80%A7/"/>
    <id>http://yoursite.com/2019/04/10/Vue计算属性/</id>
    <published>2019-04-10T03:47:37.000Z</published>
    <updated>2019-04-11T00:01:58.626Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h2 id="计算属性"><a href="#计算属性" class="headerlink" title="计算属性"></a>计算属性</h2><h3 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h3><p> <strong>1.计算属性的特点</strong></p><ul><li>1.可以对属性数据进行逻辑操作</li><li>2.对计算属性中的数据进行监视,也就是被计算的属性如果被修改,那计算属性后的结果就是被修改后再计算的结果.</li><li>3.计算属性依赖于响应式中的数据,可以当做作为data数据中的修饰符,<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">var vm = new Vue(&#123;</span><br><span class="line">    el: &quot;#app&quot;,</span><br><span class="line">    data:&#123;</span><br><span class="line">        msg:&quot;hello vue!&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    computed:&#123;</span><br><span class="line">        msgReverse:function()&#123;</span><br><span class="line">            return this.msg.split(&quot; &quot;).reverse().join(&quot; &quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line">调用方法：&#123;&#123;msgReverse&#125;&#125;  //vue hello</span><br></pre></td></tr></table></figure></li></ul><h3 id="2-computed计算属性VSmethods内的方法"><a href="#2-computed计算属性VSmethods内的方法" class="headerlink" title="2.computed计算属性VSmethods内的方法"></a>2.computed计算属性VSmethods内的方法</h3><ul><li>计算属性的get函数，如果使用methods内的方法，也可以达到同样的效果，那我们为何要使用计算属性呢？</li><li>他们之间的的区别<ol><li>计算属性是依赖于被计算的数据,只有当这个数据改变的时候,计算属性才会改变</li><li>计算属性是有缓存的,如果计算的那个数据没有发生改变,无论你访问多少次,计算属性返回的值依旧是之前计算的值</li></ol></li></ul><pre><code>var vm = new Vue({    el: &quot;#app&quot;,    data:{        num:8    },    computed:{        getNum:function(){            console.log(new Date());    // Wed Feb 27 2019 13:00:42 GMT+0800 (中国标准时间)            return this.num+1;         // 9        }    },    methods:{        getNum2:function(){            console.log(new Date());    // Wed Feb 27 2019 13:00:42 GMT+0800 (中国标准时间)            return this.num+1;         // 9        }    }})// 模拟多次访问计算属性，每次结果都一样，new Date()的值也被缓存了，没有发生改变setInterval(function(){    console.log(vm.getNum);     // Wed Feb 27 2019 13:00:42 GMT+0800 (中国标准时间)                                // 9},1000)// 模拟多次访问methods内的方法，new Date()每次结果都在发生改变，没有被缓存setInterval(function(){    console.log(vm.getNum2());     // （ new Date的值一直在变化 ）                                // 9},1000)</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;计算属性&quot;&gt;&lt;a href=&quot;#计算属性&quot; class=&quot;headerlink&quot; title=&quot;计算属性&quot;&gt;&lt;/a&gt;计算属性&lt;/h2&gt;&lt;h3 id=&quot;基本用法&quot;&gt;&lt;a href=&quot;#基本用法&quot; class=&quot;headerlink
      
    
    </summary>
    
      <category term="Vue基础语法" scheme="http://yoursite.com/categories/Vue%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/"/>
    
    
  </entry>
  
  <entry>
    <title>es6常用数组操作及总结</title>
    <link href="http://yoursite.com/2019/04/10/es6%E5%B8%B8%E7%94%A8%E6%95%B0%E7%BB%84%E6%93%8D%E4%BD%9C%E5%8F%8A%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2019/04/10/es6常用数组操作及总结/</id>
    <published>2019-04-10T01:01:48.000Z</published>
    <updated>2019-04-11T00:53:36.099Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h2 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h2><ol><li><code>array.filter(callback[, thisArg]);</code></li></ol><ul><li>filter是一个常用的数组操作,它用于将Array的不符合条件的元素过滤出来,返回由符合条件元素组成的新列表</li><li>和map()类似,filter也接收一个函数,和map()不同的是,filter()把传入的函数一次作用于每个元素,然后根据返回值是true还是flase决定保留还是丢弃该元素.</li><li>filter()接收的是一个回调函数,通常我们只使用它的第一个参数,表示Array的某个元素,表示元素的位置和元素本身.</li></ul><p><strong>filter的几种用法</strong></p><ul><li><p>创建一个数组，判断数组中是否存在某个值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var newarr = [</span><br><span class="line">  &#123; num: 1, val: &apos;ceshi&apos;, flag: &apos;aa&apos; &#125;,</span><br><span class="line">  &#123; num: 2, val: &apos;ceshi2&apos;, flag: &apos;aa2&apos;  &#125;</span><br><span class="line">]</span><br><span class="line">console.log(newarr.filter(item =&gt; item.num===2 ))</span><br></pre></td></tr></table></figure></li><li><p>去掉空数组空字符串、undefined、null</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">var arr = [&apos;1&apos;,&apos;2&apos;,undefined, &apos;3.jpg&apos;,undefined]</span><br><span class="line">var newArr = arr.filter(item =&gt; item)</span><br><span class="line">console.log(newArr)</span><br><span class="line"></span><br><span class="line">var arr = [&apos;1&apos;,&apos;2&apos;,null, &apos;3.jpg&apos;,null]</span><br><span class="line">var newArr = arr.filter(item =&gt; item)</span><br><span class="line">console.log(newArr)</span><br><span class="line"></span><br><span class="line">&gt;//空字符串里面不能包含空格</span><br><span class="line">var arr = [&apos;1&apos;,&apos;2&apos;,&apos;&apos;, &apos;3.jpg&apos;,&apos;&apos;]</span><br><span class="line">var newArr = arr.filter(item =&gt; item)</span><br><span class="line">console.log(newArr)</span><br></pre></td></tr></table></figure></li><li><p>去掉数组中不符合项</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var arr = [20,30,50, 96,50]</span><br><span class="line">var newArr = arr.filter(item =&gt; item&gt;40)  </span><br><span class="line">console.log(newArr)</span><br></pre></td></tr></table></figure></li><li><p>过滤不符合项</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var arr = [&apos;10&apos;,&apos;12&apos;,&apos;23&apos;,&apos;44&apos;,&apos;42&apos;]</span><br><span class="line">var newArr = arr.filter(item =&gt; item.indexOf(&apos;2&apos;)&lt;0) </span><br><span class="line">console.log(newArr)</span><br></pre></td></tr></table></figure></li><li><p>数组去重</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var arr = [1, 2, 2, 3, 4, 5, 5, 6, 7, 7,8,8,0,8,6,3,4,56,2];</span><br><span class="line">var arr2 = arr.filter((x, index,self)=&gt;self.indexOf(x)===index) //indexof可以返回每个指定字符串在字符串中出现的位置</span><br><span class="line">console.log(arr2); //[1, 2, 3, 4, 5, 6, 7, 8, 0, 56]</span><br></pre></td></tr></table></figure></li></ul><ol start="2"><li>array.map(callback[, thisArg]);</li></ol><ul><li>返回一个新数组,新数组中每个元素都是调用callback函数后返回的结果,</li><li>在实际使用的时候,我们可以利用map方法以便利的获取对象中的特定的属性值</li><li>注意:array.map由于不具有过滤的功能，因此array调用map函数时，如果array中的数据并不是每一个都会return，则必须先filter，然后再map，即map调用时必须是对数组中的每一个元素都有效。<figure class="highlight plain"><figcaption><span>maped </span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">``` maped: [&apos;aac&apos;, &apos;bbc&apos;];**</span><br></pre></td></tr></table></figure></li></ul><ol start="3"><li>array.includes(searchElement, fromIndex);</li></ol><ul><li>inlcludes()方法用来判断一个数组是否包含一个指定的值,返回true或者false.searchElement要查找的元素,fromIndex开始查找的索引的位置<br><code>[1, 2, 3].includes(2, 2);  // false</code></li></ul><ol start="4"><li>array.findIndex(callback[, thisArg]);</li></ol><ul><li>返回通过callback函数测试的第一个元素的索引，否则返回-1，callback函数定义同上。<br><code>const findIndex = [1, 2, 3].findIndex(element =&gt; element &gt; 1);  // findIndex: 1</code></li></ul><ol start="5"><li>array.find(callback[, thisArg]);</li></ol><ul><li>返回通过callback函数测试的第一个元素，否则返回undefined，callback函数定义同上。<br><code>const finded = [1, 2, 3].find(element =&gt; element &gt; 1); // finded: 2</code></li></ul><ol start="6"><li>array.slice(begin, end)</li></ol><ul><li>返回一个新数组，包含原数组从begin 到 end(不包含end)索引位置的所有元素。<br><code>const newArray = [&#39;zero&#39;, &#39;one&#39;, &#39;two&#39;, &#39;three&#39;].slice(1, 3);   // newArray: [&#39;one&#39;, &#39;two&#39;];</code></li></ul><ol start="7"><li>array.splice(start[, deleteCount, item1, item2, …]);</li></ol><ul><li>通过删除现有元素和/或添加新元素来更改一个数组的内容.start指定修改的开始位置.deleteCount:从start位置开始要删除的元素个数;要添加进数组的元素,从start位置开始.</li><li>注意:返回值是由被删除数组组成的数组,如果只删除了一个元素,则返回只包含一个元素的数组.如果没有删除元素,则返回空数组.</li><li>如果deleteCount大于start之后的元素的总数.则从start后面的元素都将被删除(含start).<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">const myFish = [&apos;angel&apos;, &apos;clown&apos;, &apos;mandarin&apos;, &apos;sturgeon&apos;];</span><br><span class="line">const deleted = myFish.splice(2, 0, &apos;drum&apos;); // 在索引为2的位置插入&apos;drum&apos;</span><br><span class="line">// myFish 变为 [&quot;angel&quot;, &quot;clown&quot;, &quot;drum&quot;, &quot;mandarin&quot;, &quot;sturgeon&quot;]，deleted为[]</span><br></pre></td></tr></table></figure></li></ul><ol start="8"><li>array.concat(array1, array2,…arrayN);</li></ol><ul><li>合并多个数组,返回合并后的数组,原数组没有变化<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">const array = [1,2].concat([&apos;a&apos;, &apos;b&apos;], [&apos;name&apos;]);</span><br><span class="line">// [1, 2, &quot;a&quot;, &quot;b&quot;, &quot;name&quot;]</span><br></pre></td></tr></table></figure></li></ul><ol start="9"><li>array.pop() 与 array.shift();</li></ol><ul><li><p>pop为从数组中删除最后一个元素，并返回最后一个元素的值，原数组的最后一个元素被删除。数组为空时返回undefined。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[1, 2, 3].pop();</span><br><span class="line">// 3</span><br></pre></td></tr></table></figure></li><li><p>shift删除数组的第一个元素，并返回第一个元素，原数组的第一个元素被删除。数组为空返回undefined。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">const shifted = [&apos;one&apos;, &apos;two&apos;, &apos;three&apos;].shift();</span><br><span class="line">// shifted: &apos;one&apos;</span><br></pre></td></tr></table></figure></li></ul><ol start="10"><li>array.push(element1, element2, ….elementN) 与 array.unshift(element1, element2, …elementN);</li></ol><ul><li>push是将一个或多个元素添加到数组的末尾，并返回新数组的长度; unshift将一个或多个元素添加到数组的开头，并返回新数组的长度。唯一的区别就是插入的位置不同。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">const arr = [1, 2, 3];</span><br><span class="line">const length = arr.push(4, 5);</span><br><span class="line">// arr: [1, 2, 3, 4, 5]; length: 5</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;常用方法&quot;&gt;&lt;a href=&quot;#常用方法&quot; class=&quot;headerlink&quot; title=&quot;常用方法&quot;&gt;&lt;/a&gt;常用方法&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;code&gt;array.filter(callback[, thisArg]
      
    
    </summary>
    
      <category term="es6" scheme="http://yoursite.com/categories/es6/"/>
    
    
      <category term="es6" scheme="http://yoursite.com/tags/es6/"/>
    
      <category term="数组" scheme="http://yoursite.com/tags/%E6%95%B0%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>Vue基础语法二</title>
    <link href="http://yoursite.com/2019/04/08/Vue%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95%E4%BA%8C/"/>
    <id>http://yoursite.com/2019/04/08/Vue基础语法二/</id>
    <published>2019-04-08T12:45:47.000Z</published>
    <updated>2019-04-14T01:29:17.895Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h2 id="插槽"><a href="#插槽" class="headerlink" title="插槽"></a>插槽</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><blockquote><p>简单来说,假如父组件需要在子组件内放一些DOM,那么这些DOM是显示,不显示,在那些地方显示,如何显示,就是插槽(slot)分发负责的活</p></blockquote><p><strong><em>注意:父组件在子组件内套的内容,是不显示的</em></strong></p><h3 id="slot"><a href="#slot" class="headerlink" title="slot"></a>slot</h3><blockquote><p>slot就是占位符,用于展示在组件标签内部显示的内容<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;app&quot;&gt;  </span><br><span class="line">    &lt;children&gt;  </span><br><span class="line">        &lt;span&gt;12345&lt;/span&gt;  </span><br><span class="line">        &lt;!--上面这行不会显示--&gt;  </span><br><span class="line">    &lt;/children&gt;  </span><br><span class="line">&lt;/div&gt;  </span><br><span class="line">&lt;script&gt;  </span><br><span class="line">    var vm = new Vue(&#123;  </span><br><span class="line">        el: &apos;#app&apos;,  </span><br><span class="line">        components: &#123;  </span><br><span class="line">            children: &#123;    //这个无返回值，不会继续派发  </span><br><span class="line">                template: &quot;&lt;button&gt;为了明确作用范围，所以使用button标签&lt;/button&gt;&quot;  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;);  </span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></p></blockquote><h3 id="单个slot"><a href="#单个slot" class="headerlink" title="单个slot"></a>单个slot</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;app&quot;&gt;  </span><br><span class="line">    &lt;children&gt;  </span><br><span class="line">        &lt;span&gt;12345&lt;/span&gt;  </span><br><span class="line">        &lt;!--上面这行不会显示--&gt;  </span><br><span class="line">    &lt;/children&gt;  </span><br><span class="line">&lt;/div&gt;  </span><br><span class="line">&lt;script&gt;  </span><br><span class="line">    var vm = new Vue(&#123;  </span><br><span class="line">        el: &apos;#app&apos;,  </span><br><span class="line">        components: &#123;  </span><br><span class="line">            children: &#123;    //这个无返回值，不会继续派发  </span><br><span class="line">                template: &quot;&lt;button&gt;&lt;slot&gt;&lt;/slot&gt;为了明确作用范围，所以使用button标签&lt;/button&gt;&quot;  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;);  </span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><ul><li>这样写结果是:<code>&lt;button&gt;&lt;span&gt;12345&lt;/span&gt;</code>为了明确作用范围，所以使用button标签<code>&lt;/button&gt;</code>即父组件入到子组件的内容,插入到了子组件的<code>&lt;slot&gt;&lt;/slot&gt;</code></li><li>注意即使有多个标签,也会被一起插入,相当于用父组件插入子组件里的标签,替换了<code>&lt;slot&gt;&lt;/slot&gt;</code><h3 id="具名插槽"><a href="#具名插槽" class="headerlink" title="具名插槽"></a>具名插槽</h3><blockquote><p>指将放入子组件里的不同html标签放在不同的位置(也就是不同的插槽内)</p></blockquote></li><li>父组件要在分发的标签里添加v-slot:name属性</li><li>子组件要在对应的分发位置的slot标签里添加name = name属性</li><li>然后就会将对应的标签放置在对应的位置上了</li><li>注意:slot不能当做组件的根元素使用,v-slot只用在组件中使用.</li><li>只要出现多个插槽，请始终为所有的插槽使用完整的基于<code>&lt;template&gt;</code>的语法</li></ul><h3 id="编译作用域"><a href="#编译作用域" class="headerlink" title="编译作用域"></a>编译作用域</h3><blockquote><p>组件标签 的内容中的 变量 获取的是当前组件调用者的 作用域的变量</p><ul><li>父级模板里所有的内容都是在父级作用域中编译的,子级模板里的所有内容都是在子作用域中编译的.</li></ul></blockquote><h3 id="后备内容"><a href="#后备内容" class="headerlink" title="后备内容"></a>后备内容</h3><blockquote><p>slot可以设置后备内容</p><ul><li>后备内容指的就是默认内容,它只会在没有提供内容的时候被渲染,它被放在slot标签内部.</li><li>如果在父组件中使用并且提供内容,那个这个提供的内容将会被渲染并取代后备内容</li></ul></blockquote><h3 id="作用域插槽"><a href="#作用域插槽" class="headerlink" title="作用域插槽"></a>作用域插槽</h3><blockquote><p>如何在组件内部的slot对应的组件外部内容中访问到组件内部的变量. 换句话说如何把组件内部的变量,通过slot在外部进行装饰.</p><ul><li>我们可以将user作为一个<slot>元素的特性绑定上去,<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;span&gt;</span><br><span class="line">  &lt;slot v-bind:user=&quot;user&quot;&gt;</span><br><span class="line">    &#123;&#123; user.lastName &#125;&#125;</span><br><span class="line">  &lt;/slot&gt;</span><br><span class="line">&lt;/span&gt;</span><br></pre></td></tr></table></figure></slot></li></ul></blockquote><ul><li>绑定在<slot>元素上的特性被称为插槽prop.现在在父级作用域中,我们也可以给v-slot带一个值来定义我们插槽prop的名字<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;current-user&gt;</span><br><span class="line">  &lt;template v-slot:default=&quot;abc&quot;&gt;</span><br><span class="line">    &#123;&#123; abc.user.firstName &#125;&#125;</span><br><span class="line">  &lt;/template&gt;</span><br><span class="line">&lt;/current-user&gt;</span><br></pre></td></tr></table></figure></slot></li></ul><h2 id="动态组件-异步组件"><a href="#动态组件-异步组件" class="headerlink" title="动态组件/异步组件"></a>动态组件/异步组件</h2><ul><li>keep-alive</li><li>‘my-component’: () =&gt; import(‘./my-async-component’)</li></ul><h2 id="边界情况"><a href="#边界情况" class="headerlink" title="边界情况"></a>边界情况</h2><ol><li>父组件调用子组件</li></ol><ul><li>组件时可以复用的,父组件找到子组件的唯一方法是给子组件取名字(使用ref)</li><li>然后调用方法时,在父组件方法中通过this.$refs.(子组件名)就可以找到子组件,并且使用它</li></ul><ol start="2"><li>孙子及以下节点找父组件</li></ol><ul><li>调用自身的方法打印this.$root就是顶级父组件对象</li></ul><ol start="3"><li>孩子组件找父组件</li></ol><ul><li>调用自身的方法打印this.$parent就是父组件对象</li></ul><h3 id="访问组件"><a href="#访问组件" class="headerlink" title="访问组件"></a>访问组件</h3><ul><li>访问根实例 $root</li><li>访问父级组件实例 $parent</li><li>访问子组件实例或子元素 $refs.xx</li></ul><h2 id="过渡-动画"><a href="#过渡-动画" class="headerlink" title="过渡/动画"></a>过渡/动画</h2><ul><li>v-enter  过渡的开始状态,在元素被插入之前生效</li><li>v-enter-active 定义进入过渡生效的状态,在整个过渡阶段应用,在元素被插入之前生效</li><li>v-enter-to  定义进入过渡的结束状态</li><li>v-leave   定义离开过渡的开始状态</li><li>v-leave-active 定义离开过渡生效的状态</li><li>v-leave-to 定义离开过渡的结束状态</li><li>注意: 需要使用vue提供的transiton标签把要进行过渡的元素包裹起来。</li></ul><h2 id="混入"><a href="#混入" class="headerlink" title="混入"></a>混入</h2><blockquote><p>可以复用的代码块,在组件引入可以把混合的对象合并到当前组件.</p><ul><li>通过使用mixins属性并且通过数组的形式引入要被混合的对象引入到当前组件</li></ul></blockquote><h2 id="自定义指令"><a href="#自定义指令" class="headerlink" title="自定义指令"></a>自定义指令</h2><blockquote><p>vue不提倡直接操作dom元素,如果真的需要有,一般在自定义指令里完成.指令可以传递参数和修饰符,使指令的操作更加灵活.</p><ul><li>通过directive属性定义,在inserted时被插入DOM对象</li><li>注意: 第一个参数永远是el,指的是当前指令的DOM对象</li><li>在标签中使用时需要加上v-</li><li>参数 binding.value 可以获取指令的参数</li><li>修饰符 binding.modifiers 通过修饰符可以传递额外的参数,多个参数是对象类型,其中每一个为boolean类型.</li></ul></blockquote><h2 id="自定义过滤器"><a href="#自定义过滤器" class="headerlink" title="自定义过滤器"></a>自定义过滤器</h2><ul><li>过滤器可以同时使用多个,通过管道符隔开</li><li>过滤器可以传参(可以传多个)</li><li>过滤器通过使用Vue.filter定义第一个参数为过滤器的名称,第二个参数为一个回调函数回调函数也有一个参数,为要过滤元素的属性值.</li></ul><h2 id="列表渲染-v-for"><a href="#列表渲染-v-for" class="headerlink" title="列表渲染(v-for)"></a>列表渲染(v-for)</h2><blockquote><p>我们使用v-for指令根据一组数据的选项列表进行渲染.v-for指令需要以item in items形式的特殊语法,items是源数据组并且item是数组元素迭代的别名<br><strong>基本用法</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;ul id =&quot;example-1&quot;&gt;</span><br><span class="line">    &lt;li v-for=&quot;item in items&quot;&gt;</span><br><span class="line">        &#123;&#123;item.message&#125;&#125;</span><br><span class="line">    &lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br></pre></td></tr></table></figure></p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">var example1 new = vue(&#123;</span><br><span class="line">    el:&quot;#example&quot;,</span><br><span class="line">    data:&#123;</span><br><span class="line">        items:&#123;</span><br><span class="line">            &#123;message:&apos;foo&apos;&#125;,</span><br><span class="line">            &#123;message:&apos;bar&apos;&#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li>在v-for块中,我们拥有对父作用域属性的完全访问权限,v-for还支持一个可选的第二个参数为当前的索引</li><li>注意:你也可以使用of代替in作为分隔符,因为它是最近Javascript迭代器的语法</li></ul><p><strong>对象迭代</strong></p><ul><li>可以提供三个参数:</li><li>value为键值,第二个参数key为键名,第三个参数为索引index</li></ul><p><strong>整数迭代</strong></p><ul><li>v-for也可以取整数.在这种情况下,它将重复多次模板</li></ul><p><strong>组件和v-for</strong></p><ul><li>在自定义组件里你也可以使用v-for</li><li>然而他不能自动传递数据到组件里,因为组件里有自己的作用域,为了传递迭代数据到组件里,我们要使用pros</li></ul><p><strong>key</strong></p><ul><li>为了给Vue一个提示,以便它能跟踪每个节点的身份,从而重用和重新排序现有元素,你需要为每一项提供一个唯一的key值,它的工作方式类似于一个属性,所以你需要使用v-bind来绑定动态值</li></ul><h2 id="数组更新检测"><a href="#数组更新检测" class="headerlink" title="数组更新检测"></a>数组更新检测</h2><h3 id="变异方法-会改变原数组-且会触发更新"><a href="#变异方法-会改变原数组-且会触发更新" class="headerlink" title="变异方法:会改变原数组,且会触发更新"></a>变异方法:会改变原数组,且会触发更新</h3><ul><li>push,pro,shift,unshift,splice,sort,reverse<h3 id="非变异方法-不会改变原数组-总是返回一个新数组"><a href="#非变异方法-不会改变原数组-总是返回一个新数组" class="headerlink" title="非变异方法: 不会改变原数组,总是返回一个新数组"></a>非变异方法: 不会改变原数组,总是返回一个新数组</h3></li><li>filter concat slice map some <h3 id="显示过滤-排序结果"><a href="#显示过滤-排序结果" class="headerlink" title="显示过滤/排序结果"></a>显示过滤/排序结果</h3></li><li>有时,我们希望显示一个数组的过滤或者排序副本,但是不改变或重置原始数据,在这种情况下,可以创建或者返过滤或者排序数组的计算属性</li></ul><h3 id="Vue中的v-if与v-show的区别"><a href="#Vue中的v-if与v-show的区别" class="headerlink" title="Vue中的v-if与v-show的区别"></a>Vue中的v-if与v-show的区别</h3><blockquote><p>v-if的特点</p><ul><li>有较高的切换消耗,每次都会重新删除或者创建的元素.就是说,如果你每次都需要删除和切换频率很高的时候建议使用v-show<br>v-show的特点</li><li>每次不会重新进行dom元素的创建和删除,只是通过display属性切换元素的属性(display:none)不会占据原来的空间,有较高的初始渲染消耗</li><li>总结v-if有较高的切换消耗,v-show有较高的初始渲染消耗</li><li>元素需要频繁切换时,使用v-show,当运行条件不大可能改变的时候可以使用v-if.</li></ul></blockquote><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><ul><li>因为javascript的限制,Vue.js不能检测到下面数组的变化</li></ul><ol><li>直接用索引设置元素,如vm.items[0] = {}</li></ol><ul><li>为了解决这个问题,Vue.js扩展了观察数组,为它添加了一个$set()方法</li><li><code>example.items.$set(0,{childmsg:&#39;Changed!&#39;})</code></li></ul><ol start="2"><li>修改数据的长度,如vm.items.length= 0</li></ol><ul><li>至于这个问题,只需要使用一个空数组替换items.除了$set方法,Vue.js也为观察数组提供了$remove方法,用于从目标数组中查找并删除元素,在它内部调用它splice().因此,不必这样<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var index = this.items.indexOf(item)</span><br><span class="line">if(index!=-1)&#123;</span><br><span class="line">    this.items.splice(index,1)</span><br><span class="line">&#125;</span><br><span class="line">只用这样`this.items.$remove(item);</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;插槽&quot;&gt;&lt;a href=&quot;#插槽&quot; class=&quot;headerlink&quot; title=&quot;插槽&quot;&gt;&lt;/a&gt;插槽&lt;/h2&gt;&lt;h3 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;headerlink&quot; title=&quot;概念&quot;
      
    
    </summary>
    
      <category term="Vue基础语法" scheme="http://yoursite.com/categories/Vue%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/"/>
    
    
      <category term="-Vue -基础" scheme="http://yoursite.com/tags/Vue-%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>原型对象总结</title>
    <link href="http://yoursite.com/2019/04/07/%E5%8E%9F%E5%9E%8B%E5%AF%B9%E8%B1%A1%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2019/04/07/原型对象总结/</id>
    <published>2019-04-07T14:03:20.000Z</published>
    <updated>2019-04-08T00:01:29.067Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h2 id="原型对象"><a href="#原型对象" class="headerlink" title="原型对象"></a>原型对象</h2><blockquote><p>函数的prototype属性</p><ul><li>每个函数都有一个prototype属性,它默认指向一个Object空对象(即称为:原型对象)</li><li>原型对象中有一个constructor,它指向函数对象</li></ul></blockquote><ul><li>给原型对象添加属性(一般都是方法)<ul><li>作用: 函数的实例对象自动拥有原型中的属性(方法)</li><li>实例对象可以引用原型对象添加的属性(一般是方法);<blockquote><p>显式原型和隐式原型</p></blockquote></li></ul></li><li>每个函数fucntion都有一个prototype,即显式原型</li><li>每个实例对象都有一个<strong>proto</strong>,称为隐式原型</li><li>实例对象的隐性原型对应的值,为其对应的构造函数的显式原型的值</li><li>总结:</li><li>函数的prototype属性:在定义函数时自动添加,默认值是一个空Object对象(也就是执行函数定义时自动添加了prototype属性)</li><li>注意prototype保存的值是地址值,它是一个引用变量属性.</li><li>函数的<strong>proto</strong>属性:在创建对象时自动添加,默认值为prototype的值</li><li><p>程序员能直接操作显式对象,但不能直接操作隐式对象(ES6之前)</p></li><li><p>执行函数定义与执行函数的区别</p><ul><li>执行函数定义的时候,函数体还没有执行,只是定义了函数,本质上只是创建了一个函数对象 </li><li>加()的时候函数体才会执行 调用 </li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;原型对象&quot;&gt;&lt;a href=&quot;#原型对象&quot; class=&quot;headerlink&quot; title=&quot;原型对象&quot;&gt;&lt;/a&gt;原型对象&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;函数的prototype属性&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;每个函
      
    
    </summary>
    
      <category term="面向对象" scheme="http://yoursite.com/categories/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    
    
      <category term="-Javascript -面向对象" scheme="http://yoursite.com/tags/Javascript-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    
  </entry>
  
</feed>
